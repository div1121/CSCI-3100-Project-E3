{"version":3,"sources":["Login.js","Navbar.js","ChatRoom.js","GameBoard.js","Game.js","GameRoom.js","Menu.js","App.js","index.js"],"names":["app","Realm","id","LoginAsGuest","setUser","loginAsGuest","a","logIn","anonymous","user","alert","href","onClick","Register","email","password","register","emailPasswordAuth","registerUser","Button","variant","LoginWithEmail","loginWithEmail","emailPassword","LogOut","logout","currentUser","logOut","size","LoginForm","React","useState","mode","setMode","username","setUsername","setEmail","setPassword","useEffect","className","type","placeholder","value","onChange","e","target","oldMode","LoginButton","show","setShow","Modal","onHide","Header","closeButton","Title","Body","TopNavbar","Navbar","bg","Brand","Nav","Text","Link","ChatRoom","Component","pressed","start","GameBoard","props","state","board","entityStates","entrance","empty","player","setPlayerPosition","bind","setBoard","this","boardHeight","boardWidth","areaHeight","areaWidth","playerPosition","j","tempArray_1","i","tempArray_2","y","tempArray_3","x","push","setState","px","py","Math","floor","nextProps","prevPlayerPos","nx","ny","console","log","map","boardRow","area","fontColour","backgroundColour","style","textAlign","verticalAlign","backgroundColor","color","cellSpacing","border","width","height","areaRow","cell","Game","win","showGameBoard","randomEntrances","randomPositions","totalMoves","initializeBoardPlayer","startGame","setEntrances","countTotalMoves","handleKeyUp","handleKeyDown","handleKeyRight","handleKeyLeft","makeMove","randomValues","entranceDifferences","temp","targetWidth","random","targetHeight","splice","preventDefault","Number","newX","newY","prevPos","ax","ay","tx","ty","status","keyEventName","KEYDOWN","keyValue","onKeyHandle","Playerline","str","isready","playername","handleready","Gameroom","room_name","roomname","player_list","player_num","ready_num","ready_state","Array","fill","addready","minusready","array","list","Demo","CustomRoom","Menu","GameRoom","App","Container","fluid","Row","Col","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f89b5278.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as Realm from 'realm-web';\r\nimport { Button, Modal } from 'react-bootstrap';\r\n\r\nconst REALM_APP_ID = 'application-0-exwhb';\r\nconst app = new Realm.App({ id: REALM_APP_ID });\r\n\r\nfunction LoginAsGuest({ setUser }) {\r\n\tconst loginAsGuest = async () => {\r\n\t\ttry {\r\n\t\t\tconst user = await app.logIn(Realm.Credentials.anonymous());\r\n\t\t\tsetUser(user);\r\n\t\t} catch (error) {\r\n\t\t\talert('Failed to connect');\r\n\t\t}\r\n\t};\r\n\treturn <a href='#' onClick={loginAsGuest}>login as guest</a>;\r\n}\r\n\r\nfunction Register({ email, password}) {\r\n\tconst register = async () => {\r\n\t\ttry {\r\n\t\t\tawait app.emailPasswordAuth.registerUser(email, password);\r\n\t\t\talert('A confirmation mail has been sent to the mailbox.')\r\n\t\t} catch (error) {\r\n\t\t\talert('Invalid email or password');\r\n\t\t}\r\n\t};\r\n\treturn <Button variant='secondary' onClick={register}>Register</Button>;\r\n}\r\n\r\nfunction LoginWithEmail({ setUser, email, password}) {\r\n\tconst loginWithEmail = async () => {\r\n\t\ttry {\r\n\t\t\tconst user = await app.logIn(Realm.Credentials.emailPassword(email, password));\r\n\t\t\tsetUser(user);\r\n\t\t} catch (error) {\r\n\t\t\talert('Invalid email or password');\r\n\t\t}\r\n\t};\r\n\treturn <Button variant='secondary' onClick={loginWithEmail}>Login</Button>;\r\n}\r\n\r\nfunction LogOut({ setUser }) {\r\n\tconst logout = async () => {\r\n\t\ttry {\r\n\t\t\tawait app.currentUser.logOut();\r\n\t\t\tsetUser(null);\r\n\t\t} catch (error) {\r\n\t\t\talert('Failed to connect');\r\n\t\t}\r\n\t};\r\n\treturn <Button size=\"lg\" variant='secondary' onClick={logout}>Log out</Button>;\r\n}\r\n\r\nfunction LoginForm({ setUser }) {\r\n\tconst [mode, setMode]  = React.useState('Login');\r\n\tconst toggleMode = () => {\r\n\t\tsetMode((oldMode) => (oldMode === 'Login' ? 'Register' : 'Login'));\r\n\t};\r\n\t\r\n\tconst [username, setUsername] = React.useState('');\r\n\tconst [email, setEmail] = React.useState('');\r\n\tconst [password, setPassword] = React.useState('');\r\n\t\r\n\tfunction note(){\r\n\t\treturn\r\n\t}\r\n\t\r\n\tReact.useEffect(() => {\r\n\t\tsetUsername('');\r\n\t\tsetEmail('');\r\n\t\tsetPassword('');\r\n\t}, [mode]);\r\n\t\r\n\treturn (\r\n\t\t<div className='login_form'>\r\n\t\t\t{mode === 'Register'?\r\n\t\t\t<input\r\n\t\t\t\ttype = 'username'\r\n\t\t\t\tplaceholder = 'username'\r\n\t\t\t\tvalue = {username}\r\n\t\t\t\tonChange = {(e) => setUsername(e.target.value)}\r\n\t\t\t\tclassName='form_input'\r\n\t\t\t/>\r\n\t\t\t:<></>}\r\n\t\t\t<input\r\n\t\t\t\ttype = 'email'\r\n\t\t\t\tplaceholder = 'email'\r\n\t\t\t\tvalue = {email}\r\n\t\t\t\tonChange = {(e) => setEmail(e.target.value)}\r\n\t\t\t\tclassName='form_input'\r\n\t\t\t/>\r\n\t\t\t<input\r\n\t\t\t\ttype = 'password'\r\n\t\t\t\tplaceholder = 'password'\r\n\t\t\t\tvalue = {password}\r\n\t\t\t\tonChange = {(e) => setPassword(e.target.value)}\r\n\t\t\t\tclassName='form_input'\r\n\t\t\t/>\r\n\t\t\t{mode === 'Login' ? <LoginWithEmail setUser={setUser} email={email} password={password} /> : <Register email={email} password={password}/>}\r\n\t\t\t<div>\r\n\t\t\t\t<span>You may also </span>\r\n\t\t\t\t<a href='#' onClick={() => {toggleMode();}}>\r\n\t\t\t\t\t{mode === 'Login' ? 'register a new account' : 'go to login'}\r\n\t\t\t\t</a>\r\n\t\t\t\t<span> or </span>\r\n\t\t\t\t<LoginAsGuest setUser={setUser}/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nfunction LoginButton({ setUser }) {\r\n\tconst [show, setShow] = React.useState(false);\r\n\t\r\n\tconst handleClose = () => setShow(false);\r\n\tconst handleShow = () => setShow(true);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Button size=\"lg\" variant='secondary' onClick={handleShow}>\r\n\t\t\t\tLogin\r\n\t\t\t</Button>\r\n\t\t\t<Modal show={show} onHide={handleClose}>\r\n\t\t\t\t<Modal.Header closeButton>\r\n\t\t\t\t\t<Modal.Title>Join us!</Modal.Title>\r\n\t\t\t\t</Modal.Header>\r\n\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t<LoginForm setUser={setUser} />\r\n\t\t\t\t</Modal.Body>\r\n\t\t\t</Modal>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport {LoginAsGuest, Register, LoginWithEmail, LogOut, LoginForm, LoginButton};","import { Nav, Navbar, Button, Form, FormControl } from 'react-bootstrap';\r\nimport { LoginAsGuest, Register, LoginWithEmail, LogOut, LoginForm, LoginButton } from './Login'\r\n\r\nfunction TopNavbar({ user, setUser }) {\r\n\treturn(\r\n\t<div>\r\n\t\t<Navbar className='py-4' bg='dark' variant='dark'>\r\n\t\t\t<Navbar.Brand href=\"https://github.com/luyou00001/CSCI-3100-Project-E3\t\">Magic Maze</Navbar.Brand>\r\n\t\t\t<Nav>\r\n\t\t\t\t<Navbar.Text>• A game created by CSCI3100 Project Group E3</Navbar.Text>\r\n\t\t\t</Nav>\r\n\t\t\t<Nav className='ml-auto'>\r\n\t\t\t\t{!user?\r\n\t\t\t\t\t<Nav.Link href='#home'><LoginButton setUser={setUser}/></Nav.Link>\r\n\t\t\t\t:(\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<Navbar.Text>Your id: {user.id}</Navbar.Text>\r\n\t\t\t\t\t\t<Nav.Link href='#home'><LogOut setUser={setUser}/></Nav.Link>\r\n\t\t\t\t\t</>\r\n\t\t\t\t)}\r\n\t\t\t</Nav>\r\n\t\t</Navbar>\r\n\t</div>\r\n\t)\r\n}\r\n\r\nexport {TopNavbar};","import React from 'react';\r\n\r\nclass ChatRoom extends React.Component {\r\n    render() {\r\n\t\treturn (\r\n\t\t\t<div className='chat_room'>\r\n\t\t\t\t<h1>Chat room</h1>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ChatRoom;","import React, {\n    Component\n} from 'react';\nimport pressed from \"pressed\"\npressed.start()\n\nclass GameBoard extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            board: [],\n            entityStates: {\n                entrance: '╬',\n                empty: '　',\n                player: '♂'\n            }\n        }\n        this.setPlayerPosition = this.setPlayerPosition.bind(this)\n        this.setBoard = this.setBoard.bind(this)\n    }\n    \n    componentWillMount() {\n        let {\n            boardHeight,\n            boardWidth,\n            areaHeight,\n            areaWidth,\n            playerPosition\n        } = this.props\n        let board = []\n        for (let j = 0; j < boardHeight; j++) {\n            let tempArray_1 = []\n            for (let i = 0; i < boardWidth; i++) {\n                let tempArray_2 = []\n                for (let y = 0; y < areaHeight; y++) {\n                    let tempArray_3 = []\n                    for (let x = 0; x < areaWidth; x++) {                        \n                        if ((x === 0 && y === 0) || (x === areaWidth - 1 && y === 0) || (x === areaWidth - 1 && y === areaHeight - 1) || (x === 0 && y === areaHeight - 1)) {\n                            tempArray_3.push(this.state.entityStates.entrance)\n                        } else if (playerPosition.x === i * areaWidth + x && playerPosition.y === j * areaHeight + y) {\n                            tempArray_3.push(this.state.entityStates.player)\n                        } else {\n                            tempArray_3.push(this.state.entityStates.empty)\n                        }\n                    }\n                    tempArray_2.push(tempArray_3)\n                }\n                tempArray_1.push(tempArray_2)\n            }\n            board.push(tempArray_1)\n        }\n        this.setState({\n            board: board,\n            areaHeight,\n            areaWidth,\n            playerPosition\n        }, () => {\n            this.setPlayerPosition(playerPosition)\n        })\n    }\n\n    setPlayerPosition(playerPosition) {\n        let {\n            board,\n            areaHeight,\n            areaWidth\n        } = this.state\n        let px = playerPosition.x, py = playerPosition.y\n        board[Math.floor(py / areaHeight)][Math.floor(px / areaWidth)][py % areaHeight][px % areaWidth] = this.state.entityStates.player\n        this.setState({\n            board\n        })\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps === this.props) {} else {\n            this.setBoard(nextProps)\n        }\n    }\n\n    setBoard(props) {\n        let {\n            playerPosition,\n            prevPlayerPos,\n            areaHeight,\n            areaWidth\n        } = props\n        let {\n            board\n        } = this.state\n        let px = prevPlayerPos.x, py = prevPlayerPos.y\n        let nx = playerPosition.x, ny = playerPosition.y\n        board[Math.floor(py / areaHeight)][Math.floor(px / areaWidth)][py % areaHeight][px % areaWidth] = this.state.entityStates.empty\n        board[Math.floor(ny / areaHeight)][Math.floor(nx / areaWidth)][ny % areaHeight][nx % areaWidth] = this.state.entityStates.player\n        this.setState({\n            board: board,\n            playerPosition\n        }, () => {\n            this.setPlayerPosition(playerPosition)\n        })\n    }\n\n    render() {\n        let {\n            board\n        } = this.state\n        console.log(board);\n        return(\n            <div>\n                {board.map(function(boardRow, i) {\n                return (\n                    <tr>\n                    {boardRow.map(function(area, j) {\n                        let fontColour = \"blue\"\n                        let backgroundColour = \"yellow\"\n                        if ((i + j) % 2 == 0) {\n                            fontColour = \"yellow\"\n                            backgroundColour = \"blue\"\n                        }\n                        return (\n                            <td\n                                style = {\n                                    {\n                                        textAlign: \"center\",\n                                        verticalAlign: \"middle\",\n                                        backgroundColor: backgroundColour,\n                                        color: fontColour\n                                    }\n                                }\n                            >\n                            <table\n                                className = \"area\"\n                                cellSpacing = \"0\"\n                                id = \"table\"\n                                border = \"3px\"\n                                width = \"100\"\n                                height = \"100\"\n                                textAlign = \"center\"\n                            >\n                                <tbody>\n                                    {area.map(function(areaRow) {\n                                    return (\n                                        <tr>\n                                        {areaRow.map(function(cell) {\n                                            return ( \n                                            <td className = \"area\">\n                                                {cell}\n                                                </td>\n                                            )\n                                        })}\n                                        </tr>\n                                    );\n                                    })}\n                                </tbody>\n                            </table>\n                            </td>\n                        )\n                    })}\n                    </tr>\n                );\n                })}\n            </div>\n        )\n    }\n}\n\nexport default GameBoard","import React, {\n    Component\n} from 'react';\nimport GameBoard from './GameBoard'\nimport _ from 'lodash'\nimport KeyHandler, {KEYDOWN} from 'react-key-handler';\n\nclass Game extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            win: false,\n            showGameBoard: false,\n            boardHeight: 0,\n            boardWidth: 0,\n            areaHeight: 0,\n            areaWidth: 0,\n            randomEntrances: [],\n            randomPositions: [],\n            playerPosition: {\n                x: 0,\n                y: 0\n            },\n            prevPlayerPos: {\n                x: 0,\n                y: 0\n            },\n            totalMoves: 0\n        }\n        this.initializeBoardPlayer = this.initializeBoardPlayer.bind(this)\n        this.startGame = this.startGame.bind(this)\n        this.setEntrances = this.setEntrances.bind(this)\n        this.countTotalMoves = this.countTotalMoves.bind(this)\n        this.handleKeyUp = this.handleKeyUp.bind(this)\n        this.handleKeyDown = this.handleKeyDown.bind(this)\n        this.handleKeyRight = this.handleKeyRight.bind(this)\n        this.handleKeyLeft = this.handleKeyLeft.bind(this)\n        this.makeMove = this.makeMove.bind(this)\n    }\n\n    componentWillMount() {\n        this.initializeBoardPlayer()\n    }\n\n    initializeBoardPlayer() {\n        // TODO\n        let boardWidth = 5\n        let boardHeight = 5\n        let areaWidth = 5\n        let areaHeight = 5\n        let playerPosition = {\n            x: Math.floor(areaWidth / 2),\n            y: Math.floor(areaHeight / 2)\n        }\n        let prevPlayerPos = {\n            x: Math.floor(areaWidth / 2),\n            y: Math.floor(areaHeight / 2)\n        }\n        this.setState({\n            boardHeight,\n            boardWidth,\n            areaWidth,\n            areaHeight,\n            playerPosition,\n            prevPlayerPos,\n            showGameBoard: true\n        }, () => {\n            this.startGame()\n        })\n    }\n\n    startGame() {\n        this.setEntrances()\n    }\n\n    setEntrances() {\n        let {\n            randomEntrances,\n            boardHeight,\n            boardWidth\n        } = this.state\n        let randomValues\n        for (let i = 0; i < boardHeight; i++) {\n            for (let j = 0; j < boardWidth; j++) {\n                randomEntrances.push([])\n                let entranceDifferences = [[1, -1], [1, 0], [0, 1], [-1, 1]]\n                let temp = 4\n                while (temp > 0) {\n                    randomValues = Math.floor(Math.random() * temp)\n                    let targetWidth = j + entranceDifferences[randomValues][0]\n                    let targetHeight = i + entranceDifferences[randomValues][1]\n                    if (targetWidth < 0 || targetWidth >= boardHeight || targetHeight < 0 || targetHeight >= boardHeight) {\n                        randomEntrances[j + i * boardWidth].push([])\n                        randomEntrances[j + i * boardWidth][4 - temp].push(j)\n                        randomEntrances[j + i * boardWidth][4 - temp].push(i)\n                    }\n                    else {\n                        randomEntrances[j + i * boardWidth].push([])\n                        randomEntrances[j + i * boardWidth][4 - temp].push(targetWidth)\n                        randomEntrances[j + i * boardWidth][4 - temp].push(targetHeight)\n                    }\n                    temp--\n                    entranceDifferences.splice(randomValues, 1)\n                }\n            }\n        }\n        this.setState({\n            randomEntrances\n        })\n    }\n\n    countTotalMoves() {\n        this.setState({\n            totalMoves: ++this.state.totalMoves\n        })\n    }\n\n    handleKeyUp(e) {\n        e.preventDefault()\n        let {\n            playerPosition,\n            areaHeight\n        } = this.state\n        if (Number(playerPosition.y) % areaHeight - 1 >= 0) this.makeMove(playerPosition.x, playerPosition.y - 1)\n    }\n\n    handleKeyDown(e) {\n        e.preventDefault()\n        let {\n            playerPosition,\n            areaHeight\n        } = this.state\n        if (Number(playerPosition.y) % areaHeight + 1 < areaHeight) this.makeMove(playerPosition.x, playerPosition.y + 1)\n    }\n\n    handleKeyRight(e) {\n        e.preventDefault()\n        let {\n            playerPosition,\n            areaWidth\n        } = this.state\n        if (Number(playerPosition.x) % areaWidth + 1 < areaWidth) this.makeMove(playerPosition.x + 1, playerPosition.y)\n    }\n\n    handleKeyLeft(e) {\n        e.preventDefault()\n        let {\n            playerPosition,\n            areaWidth\n        } = this.state\n        if (Number(playerPosition.x) % areaWidth - 1 >= 0) this.makeMove(playerPosition.x - 1, playerPosition.y)\n    }\n\n    makeMove(newX, newY) {\n        let {\n            playerPosition,\n            randomEntrances,\n            boardHeight,\n            boardWidth,\n            areaWidth,\n            areaHeight,\n            win\n        } = this.state\n        let prevPos = {\n            x: playerPosition.x,\n            y: playerPosition.y\n        }\n        let x = newX % areaWidth\n        let y = newY % areaHeight\n        if ((x === 0 && y === 0) || (x === areaWidth - 1 && y === 0) || (x === areaWidth - 1 && y === areaHeight - 1) || (x === 0 && y === areaHeight - 1)) {\n            let temp\n            if (x === 0 && y === 0) temp = 0\n            else if (x === areaWidth - 1 && y === 0) temp = 1\n            else if (x === areaWidth - 1 && y === areaHeight - 1) temp = 2\n            else temp = 3\n            let ax = Math.floor(newX / areaWidth), ay = Math.floor(newY / areaHeight)\n            let tx = randomEntrances[ax + ay * boardWidth][temp][0] * areaWidth + Math.floor(areaWidth / 2)\n            let ty = randomEntrances[ax + ay * boardWidth][temp][1] * areaHeight + Math.floor(areaHeight / 2)\n            playerPosition[\"x\"] = tx\n            playerPosition[\"y\"] = ty\n            if (Math.floor(tx / areaWidth) === boardWidth - 1 && Math.floor(ty / areaHeight) === boardHeight - 1) win = true\n        }\n        else {\n            playerPosition[\"x\"] = newX\n            playerPosition[\"y\"] = newY\n        }\n        this.setState({\n            playerPosition,\n            prevPlayerPos: prevPos,\n            win\n        })\n        this.countTotalMoves()\n    }\n\n    render() {\n\n        let {\n            playerPosition,\n            randomEntrances,\n            boardWidth,\n            areaWidth,\n            areaHeight,\n            totalMoves,\n            win\n        } = this.state\n\n        let status = '*GM Mode* Coordinates: (' + playerPosition[\"x\"] + ', ' + playerPosition[\"y\"] + ') '\n        let temp = Math.floor(playerPosition[\"x\"] / areaWidth) + Math.floor(playerPosition[\"y\"] / areaHeight) * boardWidth\n        status += 'Entrance: '\n        if (randomEntrances[temp]) {\n            for (let i = 0; i < 4; i++) {\n                status += '(' + randomEntrances[temp][i][0] + ', ' + randomEntrances[temp][i][1] + ') '\n            }\n        }\n        if (win) {\n            win = false\n            alert(\"You win! Total moves: \" + totalMoves)\n        }\n\n        return(<div>\n            <div className = \"status\">\n                {status}\n            </div>\n            <KeyHandler\n                keyEventName = {KEYDOWN}\n                keyValue = \"ArrowUp\"\n                onKeyHandle = {\n                    this.handleKeyUp\n                }\n            />\n            <KeyHandler\n                keyEventName = {KEYDOWN}\n                keyValue = \"ArrowDown\"\n                onKeyHandle = {\n                    this.handleKeyDown\n                }\n            />\n            <KeyHandler\n                keyEventName = {KEYDOWN}\n                keyValue = \"ArrowRight\"\n                onKeyHandle = {\n                    this.handleKeyRight\n                }\n            />\n            <KeyHandler\n                keyEventName = {KEYDOWN}\n                keyValue = \"ArrowLeft\"\n                onKeyHandle = {\n                    this.handleKeyLeft\n                }\n            />\n\n            {\n                this.state.showGameBoard &&\n                    ( < GameBoard randomPositions = {\n                            this.state.randomPositions\n                        }\n                        boardWidth = {\n                            this.state.boardWidth\n                        }\n                        boardHeight = {\n                            this.state.boardHeight\n                        }\n                        areaWidth = {\n                            this.state.areaWidth\n                        }\n                        areaHeight = {\n                            this.state.areaHeight\n                        }\n                        playerPosition = {\n                            this.state.playerPosition\n                        }\n                        prevPlayerPos = {\n                            this.state.prevPlayerPos\n                        }\n                        totalMoves = {\n                            this.state.totalMoves\n                        }\n                        />)\n                    } </div>\n            )\n        }\n    }\n\n    export default Game;","import React, { Component } from 'react';\r\n\r\nclass Playerline extends Component{\r\n    render(){\r\n        let str = \"Ready\"\r\n        if (this.props.isready){\r\n            str = \"Cancel\"\r\n        }\r\n        return (<tr>\r\n            <td>\r\n            {this.props.playername}</td>\r\n            <td><button onClick={this.props.handleready}>{str}</button>\r\n            </td>\r\n            </tr>\r\n            )\r\n    }\r\n}\r\n\r\nclass Gameroom extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {room_name: this.props.roomname, player_list: this.props.player_list, player_num: this.props.player_num, ready_num: 0 ,ready_state: Array(4).fill(false)};\r\n        this.addready = this.addready.bind(this)\r\n        this.minusready = this.minusready.bind(this)\r\n    }\r\n\r\n    addready(i){\r\n        let array = this.state.ready_state\r\n        array[i] = true\r\n        let ready_num = this.state.ready_num + 1;\r\n        this.setState({ready_num: ready_num,ready_state:array});\r\n        if (ready_num>=4){\r\n            return;\r\n        }\r\n    }\r\n\r\n    minusready(i){\r\n        let array = this.state.ready_state\r\n        array[i] = false\r\n        let ready_num = this.state.ready_num - 1;\r\n        if (ready_num<0){\r\n            return;\r\n        }\r\n        this.setState({ready_num: ready_num,ready_state:array});\r\n    }\r\n\r\n    render(){\r\n        let list = [0,0,0,0];\r\n        for (let i=0;i<4;i++){\r\n            if (this.state.ready_state[i])\r\n                list[i] = () => this.minusready(i)\r\n            else list[i] = () => this.addready(i)\r\n        }\r\n        return (<div>\r\n            <h1>{this.props.room_name}</h1>\r\n            <table>\r\n                <Playerline isready={this.state.ready_state[0]}\r\n                playername={this.props.player_list[0]} handleready={list[0]} />\r\n            <Playerline isready={this.state.ready_state[1]}\r\n                        playername={this.props.player_list[1]} handleready={list[1]} />\r\n                <Playerline isready={this.state.ready_state[2]}\r\n                        playername={this.props.player_list[2]} handleready={list[2]} />\r\n                <Playerline isready={this.state.ready_state[3]}\r\n                        playername={this.props.player_list[3]} handleready={list[3]} />\r\n            </table>\r\n            <h2>Number of ready: {this.state.ready_num}</h2>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default Gameroom;","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport Game from './Game';\r\nimport GameRoom from './GameRoom';\r\n\r\nfunction Demo({ setMode }) {\r\n\tconst demo = () => {\r\n\t\tsetMode(\"Demo\");\r\n\t}\r\n\treturn <Button size=\"lg\" variant=\"primary\" onClick={demo}>Demo</Button>\r\n}\r\n\r\nfunction CustomRoom({ setMode }) {\r\n\tconst customRoom = () => {\r\n\t\tsetMode(\"CustomRoom\");\r\n\t}\r\n\treturn <Button size=\"lg\" variant=\"primary\" onClick={customRoom}>Custom room</Button>\r\n}\r\n\r\nclass Menu extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tmode: \"\",\r\n\t\t}\r\n\t\tthis.setMode=this.setMode.bind(this);\r\n\t}\r\n\t\r\n\tsetMode(i)\t{\r\n\t\tthis.setState({\r\n\t\t\tmode: i,\r\n\t\t});\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div className='menu'>\r\n\t\t\t\t<h1>Menu</h1>\r\n\t\t\t\t<Demo setMode={this.setMode}/>\r\n\t\t\t\t<CustomRoom setMode={this.setMode}/>\r\n\t\t\t\t{this.state.mode === \"Demo\"?\r\n\t\t\t\t\t<Game />\r\n\t\t\t\t:\r\n\t\t\t\t\t<></>\r\n\t\t\t\t}\r\n\t\t\t\t{this.state.mode === \"CustomRoom\"?\r\n\t\t\t\t\t<GameRoom room_name={\"Game1\"} player_list={[\"Paul\",\"Alice\",\"Sun\",\"Jason\"]} player_num={4}/>\r\n\t\t\t\t:\r\n\t\t\t\t\t<></>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Menu;","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row, Col } from 'react-bootstrap'\nimport * as Realm from 'realm-web';\nimport { TopNavbar } from './Navbar'\nimport ChatRoom from './ChatRoom';\nimport Menu from './Menu';\n\nconst REALM_APP_ID = 'application-0-exwhb';\nconst app = new Realm.App({ id: REALM_APP_ID });\n\nfunction App() {\n\tconst [user, setUser] = React.useState(app.currentUser);\n\treturn (\n\t\t<div>\n\t\t\t<TopNavbar user={user} setUser={setUser}/>\n\t\t\t<Container fluid>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col><ChatRoom /></Col>\n\t\t\t\t\t<Col><Menu /></Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}