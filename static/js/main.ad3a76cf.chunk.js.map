{"version":3,"sources":["Login.js","Navbar.js","ChatRoom.js","GameBoard.js","Game.js","GameRoom.js","Menu.js","App.js","index.js"],"names":["app","Realm","id","LoginAsGuest","setUser","loginAsGuest","a","logIn","anonymous","user","alert","href","onClick","Register","email","password","register","emailPasswordAuth","registerUser","Button","variant","LoginWithEmail","loginWithEmail","emailPassword","LogOut","logout","currentUser","logOut","size","LoginForm","React","useState","mode","setMode","username","setUsername","setEmail","setPassword","useEffect","className","type","placeholder","value","onChange","e","target","oldMode","LoginButton","show","setShow","Modal","onHide","Header","closeButton","Title","Body","TopNavbar","Navbar","bg","Brand","Nav","Text","Link","fetch","then","res","text","txt","document","querySelector","innerHTML","prevtext","ChatRoom","props","state","handleChange","bind","handleSubmit","event","this","setState","updatedtext","method","body","preventDefault","onSubmit","Component","pressed","start","GameBoard","board","entityStates","entrance","obstacle","empty","player","setObstacles","setPlayerPosition","setBoard","boardHeight","boardWidth","playerPosition","cellHeight","cellWidth","i","innerArray","j","obj","x","y","push","randomPositions","nextProps","prevPlayerPos","newTotalObstacles","totalObstaclesLeft","undefined","totalMoves","newPlayerPos","length","map","item","index","innerItem","innerIndex","style","border","margin","width","height","textAlign","verticalAlign","Game","showGameBoard","areaHeight","areaWidth","randomEntrances","setEntrances","handleKeyUp","handleKeyDown","handleKeyRight","handleKeyLeft","countTotalMoves","initializeBoardPlayer","startGame","randomValues","entranceDifferences","temp","targetWidth","Math","floor","random","targetHeight","splice","prevPos","newX","newY","Number","ax","ay","status","keyEventName","KEYDOWN","keyValue","onKeyHandle","Playerline","str","isready","playername","handleready","Gameroom","room_name","roomname","player_list","player_num","ready_num","ready_state","Array","fill","addready","minusready","array","list","Demo","CustomRoom","Menu","GameRoom","App","Container","fluid","Row","Col","ReactDOM","render","StrictMode","getElementById"],"mappings":"oSAKMA,EAAM,IAAIC,IAAU,CAAEC,GADP,wBAGrB,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACjBC,EAAY,uCAAG,4BAAAC,EAAA,+EAEAN,EAAIO,MAAMN,IAAkBO,aAF5B,OAEbC,EAFa,OAGnBL,EAAQK,GAHW,gDAKnBC,MAAM,qBALa,yDAAH,qDAQlB,OAAO,mBAAGC,KAAK,IAAIC,QAASP,EAArB,4BAGR,SAASQ,EAAT,GAAuC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SACpBC,EAAQ,uCAAG,sBAAAV,EAAA,+EAETN,EAAIiB,kBAAkBC,aAAaJ,EAAOC,GAFjC,OAGfL,MAAM,qDAHS,+CAKfA,MAAM,6BALS,wDAAH,qDAQd,OAAO,cAACS,EAAA,EAAD,CAAQC,QAAQ,YAAYR,QAASI,EAArC,sBAGR,SAASK,EAAT,GAAsD,IAA5BjB,EAA2B,EAA3BA,QAASU,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SACnCO,EAAc,uCAAG,4BAAAhB,EAAA,+EAEFN,EAAIO,MAAMN,IAAkBsB,cAAcT,EAAOC,IAF/C,OAEfN,EAFe,OAGrBL,EAAQK,GAHa,gDAKrBC,MAAM,6BALe,yDAAH,qDAQpB,OAAO,cAACS,EAAA,EAAD,CAAQC,QAAQ,YAAYR,QAASU,EAArC,mBAGR,SAASE,EAAT,GAA8B,IAAZpB,EAAW,EAAXA,QACXqB,EAAM,uCAAG,sBAAAnB,EAAA,+EAEPN,EAAI0B,YAAYC,SAFT,OAGbvB,EAAQ,MAHK,+CAKbM,MAAM,qBALO,wDAAH,qDAQZ,OAAO,cAACS,EAAA,EAAD,CAAQS,KAAK,KAAKR,QAAQ,YAAYR,QAASa,EAA/C,qBAGR,SAASI,EAAT,GAAiC,IAAZzB,EAAW,EAAXA,QAAW,EACN0B,IAAMC,SAAS,SADT,mBACxBC,EADwB,KAClBC,EADkB,OAMCH,IAAMC,SAAS,IANhB,mBAMxBG,EANwB,KAMdC,EANc,OAOLL,IAAMC,SAAS,IAPV,mBAOxBjB,EAPwB,KAOjBsB,EAPiB,OAQCN,IAAMC,SAAS,IARhB,mBAQxBhB,EARwB,KAQdsB,EARc,KAoB/B,OANAP,IAAMQ,WAAU,WACfH,EAAY,IACZC,EAAS,IACTC,EAAY,MACV,CAACL,IAGH,sBAAKO,UAAU,aAAf,UACW,aAATP,EACD,uBACCQ,KAAO,WACPC,YAAc,WACdC,MAASR,EACTS,SAAY,SAACC,GAAD,OAAOT,EAAYS,EAAEC,OAAOH,QACxCH,UAAU,eAEV,6BACD,uBACCC,KAAO,QACPC,YAAc,QACdC,MAAS5B,EACT6B,SAAY,SAACC,GAAD,OAAOR,EAASQ,EAAEC,OAAOH,QACrCH,UAAU,eAEX,uBACCC,KAAO,WACPC,YAAc,WACdC,MAAS3B,EACT4B,SAAY,SAACC,GAAD,OAAOP,EAAYO,EAAEC,OAAOH,QACxCH,UAAU,eAED,UAATP,EAAmB,cAACX,EAAD,CAAgBjB,QAASA,EAASU,MAAOA,EAAOC,SAAUA,IAAe,cAACF,EAAD,CAAUC,MAAOA,EAAOC,SAAUA,IAC/H,gCACC,iDACA,mBAAGJ,KAAK,IAAIC,QAAS,WA7CvBqB,GAAQ,SAACa,GAAD,MAA0B,UAAZA,EAAsB,WAAa,YA6CvD,SACW,UAATd,EAAmB,yBAA2B,gBAEhD,wCACA,cAAC7B,EAAD,CAAcC,QAASA,UAM3B,SAAS2C,EAAT,GAAmC,IAAZ3C,EAAW,EAAXA,QAAW,EACT0B,IAAMC,UAAS,GADN,mBAC1BiB,EAD0B,KACpBC,EADoB,KAMjC,OACC,gCACC,cAAC9B,EAAA,EAAD,CAAQS,KAAK,KAAKR,QAAQ,YAAYR,QAJrB,kBAAMqC,GAAQ,IAI/B,mBAGA,eAACC,EAAA,EAAD,CAAOF,KAAMA,EAAMG,OARD,kBAAMF,GAAQ,IAQhC,UACC,cAACC,EAAA,EAAME,OAAP,CAAcC,aAAW,EAAzB,SACC,cAACH,EAAA,EAAMI,MAAP,yBAED,cAACJ,EAAA,EAAMK,KAAP,UACC,cAAC1B,EAAD,CAAWzB,QAASA,YC9HzB,SAASoD,EAAT,GAAuC,IAAlB/C,EAAiB,EAAjBA,KAAML,EAAW,EAAXA,QAC1B,OACA,8BACC,eAACqD,EAAA,EAAD,CAAQlB,UAAU,OAAOmB,GAAG,OAAOtC,QAAQ,OAA3C,UACC,cAACqC,EAAA,EAAOE,MAAR,CAAchD,KAAK,uDAAnB,wBACA,cAACiD,EAAA,EAAD,UACC,cAACH,EAAA,EAAOI,KAAR,mEAED,cAACD,EAAA,EAAD,CAAKrB,UAAU,UAAf,SACG9B,EAGD,qCACC,eAACgD,EAAA,EAAOI,KAAR,uBAAuBpD,EAAKP,MAC5B,cAAC0D,EAAA,EAAIE,KAAL,CAAUnD,KAAK,QAAf,SAAuB,cAACa,EAAD,CAAQpB,QAASA,SAJzC,cAACwD,EAAA,EAAIE,KAAL,CAAUnD,KAAK,QAAf,SAAuB,cAACoC,EAAD,CAAa3C,QAASA,a,2CCXlD2D,MAAM,aACLC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GAAG,OAAIC,SAASC,cAAc,SAASC,UAAUH,KAEvD,IAAII,EAAS,GA6CEC,E,kDA3CX,WAAYC,GAAQ,IAAD,8BACrB,cAAMA,IACDC,MAAQ,CAAChC,MAAO,IAErB,EAAKiC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBALC,E,gDAQnB,SAAaE,GACfC,KAAKC,SAAS,CAACtC,MAAOoC,EAAMjC,OAAOH,U,0BAGjC,SAAaoC,GACff,MAAM,aACLC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GAAG,OAAII,EAASJ,KACtB,IAAIc,EAAYV,EAAS,gCAAgCQ,KAAKL,MAAMhC,MAAM,aAC1EqB,MAAM,YAAa,CAClBmB,OAAQ,MAAOC,KAAMF,IAEtBF,KAAKC,SAAS,CAACtC,MAAO,KACtBqB,MAAM,aACLC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GAAG,OAAIC,SAASC,cAAc,SAASC,UAAUH,KACvDW,EAAMM,mB,oBAGJ,WACF,OACC,sBAAK7C,UAAU,YAAf,UACC,2CACA,qBAAKrC,GAAG,SACR,uBAAMmF,SAAUN,KAAKF,aAArB,UACC,gCACC,0BAAUnC,MAAOqC,KAAKL,MAAMhC,MAAOD,YAAY,iBAAiBE,SAAUoC,KAAKJ,iBAEhF,uBAAOnC,KAAK,SAASE,MAAM,qB,GArCTZ,IAAMwD,W,eCF7BC,EAAQC,Q,IAgKOC,E,kDA5JX,WAAYhB,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTgB,MAAO,GACPC,aAAc,CAEVC,SAAU,IACVC,SAAU,IACVC,MAAO,IACPC,OAAQ,MAGhB,EAAKC,aAAe,EAAKA,aAAapB,KAAlB,gBACpB,EAAKqB,kBAAoB,EAAKA,kBAAkBrB,KAAvB,gBACzB,EAAKsB,SAAW,EAAKA,SAAStB,KAAd,gBAdD,E,sDAiBnB,WAUI,IAVkB,IAAD,SAObG,KAAKN,MALL0B,EAFa,EAEbA,YACAC,EAHa,EAGbA,WAGAC,GANa,EAIbC,WAJa,EAKbC,UALa,EAMbF,gBAEAX,EAAQ,GAEHc,EAAI,EAAGA,EAAIL,EAAaK,IAAK,CAGlC,IAFA,IAAIC,EAAa,GAERC,EAAI,EAAGA,EAAIN,EAAYM,IAAK,CACjC,IAAIC,EAAM,GACVA,EAAG,EAAQH,EACXG,EAAG,EAAQD,EACPL,EAAeO,IAAMJ,GAAKH,EAAeQ,IAAMH,EAC/CC,EAAG,MAAY5B,KAAKL,MAAMiB,aAAaI,OAEvCY,EAAG,MAAY5B,KAAKL,MAAMiB,aAAaG,MAI3CW,EAAWK,KAAKH,GAGpBjB,EAAMoB,KAAKL,GAEf1B,KAAKC,SAAS,CACVU,MAAOA,EACPW,mBACD,WACC,EAAKJ,kBAAkBI,GACvB,EAAKL,aAAa,EAAKvB,MAAMsC,sB,+BAGrC,SAAkBV,GAAiB,IAE3BX,EACAX,KAAKL,MADLgB,MAEJA,EAAMW,EAAeO,GAAGP,EAAeQ,GAAvC,MAAqD9B,KAAKL,MAAMiB,aAAaI,OAC7EhB,KAAKC,SAAS,CACVU,Y,uCAGR,SAA0BsB,GAClBA,IAAcjC,KAAKN,OACnBM,KAAKmB,SAASc,K,sBAItB,SAASvC,GAAQ,IAAD,OAER4B,EAEA5B,EAFA4B,eACAY,EACAxC,EADAwC,cAEAC,EAAoBnC,KAAKL,MAAMyC,mBAEnC,QAAsCC,IAAlCrC,KAAKL,MAAMyC,oBAAsE,IAAlCpC,KAAKL,MAAMyC,mBAC1DzG,MAAM,2BAA6BqE,KAAKN,MAAM4C,gBAC3C,CAAC,IAEA3B,EACAX,KAAKL,MADLgB,MAEA4B,EAAejB,EACfX,EAAM4B,EAAaV,GAAGU,EAAaT,GAAnC,QAAmD9B,KAAKL,MAAMiB,aAAaE,YACzEqB,EAENxB,EAAM4B,EAAaV,GAAGU,EAAaT,GAAnC,MAAiD9B,KAAKL,MAAMiB,aAAaI,OACzEL,EAAMuB,EAAcL,GAAGK,EAAcJ,GAArC,MAAmD9B,KAAKL,MAAMiB,aAAaG,MAC3Ef,KAAKC,SAAS,CACVU,MAAOA,EACPW,iBACAc,mBAAoBD,IACrB,WACC,EAAKjB,kBAAkBI,S,0BAInC,SAAaU,GAMT,IAN2B,IAAD,EAItBhC,KAAKL,MAFLgB,EAFsB,EAEtBA,MACAW,EAHsB,EAGtBA,eAEAc,EAAqB,EAChBX,EAAI,EAAGA,EAAIO,EAAgBQ,OAAQf,IACpCO,EAAgBP,GAAGI,IAAMP,EAAeO,GAAKG,EAAgBP,GAAGK,IAAMR,EAAeQ,GACjFnB,EAAMqB,EAAgBP,GAAGI,GAAGG,EAAgBP,GAAGK,GAA/C,QAA+D9B,KAAKL,MAAMiB,aAAaE,aACrFsB,EACFzB,EAAMqB,EAAgBP,GAAGI,GAAGG,EAAgBP,GAAGK,GAA/C,MAA6D9B,KAAKL,MAAMiB,aAAaE,UAIjGd,KAAKC,SAAS,CACVU,QACAyB,yB,oBAIR,WAAU,IAEFzB,EACAX,KAAKL,MADLgB,MAEJ,OACI,kCACI,sCACIA,EAAM8B,KAAI,SAACC,EAAMC,GAAP,OACN,mCAGID,EAAKD,KAAI,SAACG,EAAWC,GAAZ,OAA6B,qBAIlCC,MACI,CACIC,OAAQ,kBACRC,OAAQ,EACRC,MAAO,GACPC,OAAQ,GACRC,UAAW,SACXC,cAAe,UAXW,UAclC,kCAEIR,EAAUjD,MAFd,OAdkC,MAE9BkD,MALZ,MACIF,SAJhB,W,GA5HYpC,a,gBC0WL8C,E,kDAvWf,WAAY3D,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACT2D,eAAe,EACflC,YAAa,EACbC,WAAY,EACZkC,WAAY,EACZC,UAAW,EACXC,gBAAiB,GACjBzB,gBAAiB,GACjBV,eAAgB,CACZO,EAAG,EACHC,EAAG,GAEPI,cAAe,CACXL,EAAG,EACHC,EAAG,GAEPQ,WAAY,GAEhB,EAAKoB,aAAe,EAAKA,aAAa7D,KAAlB,gBACpB,EAAK8D,YAAc,EAAKA,YAAY9D,KAAjB,gBACnB,EAAK+D,cAAgB,EAAKA,cAAc/D,KAAnB,gBACrB,EAAKgE,eAAiB,EAAKA,eAAehE,KAApB,gBACtB,EAAKiE,cAAgB,EAAKA,cAAcjE,KAAnB,gBACrB,EAAKkE,gBAAkB,EAAKA,gBAAgBlE,KAArB,gBAEvB,EAAKmE,sBAAwB,EAAKA,sBAAsBnE,KAA3B,gBAC7B,EAAKoE,UAAY,EAAKA,UAAUpE,KAAf,gBA5BF,E,sDA+BnB,WACIG,KAAKgE,0B,mCAGT,WAAyB,IAAD,OAkBpBhE,KAAKC,SAAS,CACVmB,YAhBc,EAiBdC,WAlBa,EAmBbmC,UAjBY,EAkBZD,WAjBa,EAkBbjC,eAjBiB,CAGjBO,EAAG,EACHC,EAAG,GAcHI,cAZgB,CAGhBL,EAAG,EACHC,EAAG,GASHwB,eAAe,IAChB,WACC,EAAKW,iB,uBAIb,WACIjE,KAAK0D,iB,0BAGT,WAOI,IAPY,IAMRQ,EANO,EAKPlE,KAAKL,MAHL8D,EAFO,EAEPA,gBACArC,EAHO,EAGPA,YACAC,EAJO,EAIPA,WAGKI,EAAI,EAAGA,EAAIL,EAAaK,IAC7B,IAAK,IAAIE,EAAI,EAAGA,EAAIN,EAAYM,IAAK,CACjC8B,EAAgB1B,KAAK,IAGrB,IAFA,IAAIoC,EAAsB,CAAC,CAAC,GAAI,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,EAAE,EAAG,IACrDC,EAAO,EACJA,EAAO,GAAG,CAEb,IAAIC,EAAc5C,EAAI0C,EADtBD,EAAeI,KAAKC,MAAMD,KAAKE,SAAWJ,IACc,GACpDK,EAAe9C,EAAIwC,EAAoBD,GAAc,GACrDG,EAAc,GAAKA,GAAejD,GAAeqD,EAAe,GAAKA,GAAgBrD,GACrFqC,EAAgB9B,EAAIF,EAAIJ,GAAYU,KAAK,IACzC0B,EAAgB9B,EAAIF,EAAIJ,GAAY,EAAI+C,GAAMrC,KAAKN,GACnDgC,EAAgB9B,EAAIF,EAAIJ,GAAY,EAAI+C,GAAMrC,KAAKJ,KAGnD8B,EAAgB9B,EAAIF,EAAIJ,GAAYU,KAAK,IACzC0B,EAAgB9B,EAAIF,EAAIJ,GAAY,EAAI+C,GAAMrC,KAAKsC,GACnDZ,EAAgB9B,EAAIF,EAAIJ,GAAY,EAAI+C,GAAMrC,KAAK0C,IAEvDL,IACAD,EAAoBO,OAAOR,EAAc,IAIrDlE,KAAKC,SAAS,CACVwD,sB,6BAIR,WACIzD,KAAKC,SAAS,CACVqC,aAActC,KAAKL,MAAM2C,e,yBAIjC,SAAYzE,GACRA,EAAEwC,iBADS,MASPL,KAAKL,MANL2B,EAHO,EAGPA,eACAmC,EAJO,EAIPA,gBACArC,EALO,EAKPA,YACAC,EANO,EAMPA,WACAmC,EAPO,EAOPA,UACAD,EARO,EAQPA,WAGAoB,EAAU,CACV9C,EAAGP,EAAeO,EAClBC,EAAGR,EAAeQ,GAElB8C,EAAOtD,EAAeO,EACtBgD,EAAOvD,EAAeQ,EAC1B,GAAIgD,OAAOD,GAAQtB,EAAa,GAAK,EAAG,CAEpC,IAAI1B,EAAI+C,EAAOpB,EACX1B,IAFF+C,EAEatB,EACf,GAAW,IAAN1B,GAAiB,IAANC,GAAaD,IAAM2B,EAAY,GAAW,IAAN1B,GAAaD,IAAM2B,EAAY,GAAK1B,IAAMyB,EAAa,GAAa,IAAN1B,GAAWC,IAAMyB,EAAa,EAAI,CAChJ,IAAIa,EACoBA,EAAd,IAANvC,GAAiB,IAANC,EAAgB,EACtBD,IAAM2B,EAAY,GAAW,IAAN1B,EAAgB,EACvCD,IAAM2B,EAAY,GAAK1B,IAAMyB,EAAa,EAAU,EACjD,EACZ,IAAIwB,EAAKT,KAAKC,MAAM1C,EAAIR,GAAa2D,EAAKV,KAAKC,MAAMzC,EAAIV,GACzDS,EAAI4B,EAAgBsB,EAAKC,EAAK3D,GAAY+C,GAAM,GAAKZ,EAAY,EACjE1B,EAAI2B,EAAgBsB,EAAKC,EAAK3D,GAAY+C,GAAM,GAAKb,EAAa,EAClEjC,EAAc,EAAQO,EACtBP,EAAc,EAAQQ,OAErBR,EAAc,EAAQuD,EAC3B7E,KAAKC,SAAS,CACVqB,iBACAY,cAAeyC,IAEnB3E,KAAK+D,qB,2BAGb,SAAclG,GACVA,EAAEwC,iBADW,MASTL,KAAKL,MANL2B,EAHS,EAGTA,eACAmC,EAJS,EAITA,gBACArC,EALS,EAKTA,YACAC,EANS,EAMTA,WACAmC,EAPS,EAOTA,UACAD,EARS,EAQTA,WAGAoB,EAAU,CACV9C,EAAGP,EAAeO,EAClBC,EAAGR,EAAeQ,GAElB8C,EAAOtD,EAAeO,EACtBgD,EAAOvD,EAAeQ,EAC1B,GAAIgD,OAAOD,GAAQtB,EAAa,EAAIA,EAAY,CAE5C,IAAI1B,EAAI+C,EAAOpB,EACX1B,IAFF+C,EAEatB,EACf,GAAW,IAAN1B,GAAiB,IAANC,GAAaD,IAAM2B,EAAY,GAAW,IAAN1B,GAAaD,IAAM2B,EAAY,GAAK1B,IAAMyB,EAAa,GAAa,IAAN1B,GAAWC,IAAMyB,EAAa,EAAI,CAChJ,IAAIa,EACoBA,EAAd,IAANvC,GAAiB,IAANC,EAAgB,EACtBD,IAAM2B,EAAY,GAAW,IAAN1B,EAAgB,EACvCD,IAAM2B,EAAY,GAAK1B,IAAMyB,EAAa,EAAU,EACjD,EACZ,IAAIwB,EAAKT,KAAKC,MAAM1C,EAAIR,GAAa2D,EAAKV,KAAKC,MAAMzC,EAAIV,GACzDS,EAAI4B,EAAgBsB,EAAKC,EAAK3D,GAAY+C,GAAM,GAAKZ,EAAY,EACjE1B,EAAI2B,EAAgBsB,EAAKC,EAAK3D,GAAY+C,GAAM,GAAKb,EAAa,EAClEjC,EAAc,EAAQO,EACtBP,EAAc,EAAQQ,OAErBR,EAAc,EAAQuD,EAC3B7E,KAAKC,SAAS,CACVqB,iBACAY,cAAeyC,IAEnB3E,KAAK+D,qB,4BAGb,SAAelG,GACXA,EAAEwC,iBADY,MASVL,KAAKL,MANL2B,EAHU,EAGVA,eACAmC,EAJU,EAIVA,gBACArC,EALU,EAKVA,YACAC,EANU,EAMVA,WACAmC,EAPU,EAOVA,UACAD,EARU,EAQVA,WAGAoB,EAAU,CACV9C,EAAGP,EAAeO,EAClBC,EAAGR,EAAeQ,GAElB8C,EAAOtD,EAAeO,EACtBgD,EAAOvD,EAAeQ,EAC1B,GAAIgD,OAAOF,GAAQpB,EAAY,EAAIA,EAAW,CAE1C,IAAI3B,IADF+C,EACapB,EACX1B,EAAI+C,EAAOtB,EACf,GAAW,IAAN1B,GAAiB,IAANC,GAAaD,IAAM2B,EAAY,GAAW,IAAN1B,GAAaD,IAAM2B,EAAY,GAAK1B,IAAMyB,EAAa,GAAa,IAAN1B,GAAWC,IAAMyB,EAAa,EAAI,CAChJ,IAAIa,EACoBA,EAAd,IAANvC,GAAiB,IAANC,EAAgB,EACtBD,IAAM2B,EAAY,GAAW,IAAN1B,EAAgB,EACvCD,IAAM2B,EAAY,GAAK1B,IAAMyB,EAAa,EAAU,EACjD,EACZ,IAAIwB,EAAKT,KAAKC,MAAM1C,EAAIR,GAAa2D,EAAKV,KAAKC,MAAMzC,EAAIV,GACzDS,EAAI4B,EAAgBsB,EAAKC,EAAK3D,GAAY+C,GAAM,GAAKZ,EAAY,EACjE1B,EAAI2B,EAAgBsB,EAAKC,EAAK3D,GAAY+C,GAAM,GAAKb,EAAa,EAClEjC,EAAc,EAAQO,EACtBP,EAAc,EAAQQ,OAErBR,EAAc,EAAQsD,EAC3B5E,KAAKC,SAAS,CACVqB,iBACAY,cAAeyC,IAEnB3E,KAAK+D,qB,2BAGb,SAAclG,GACVA,EAAEwC,iBADW,MASTL,KAAKL,MANL2B,EAHS,EAGTA,eACAmC,EAJS,EAITA,gBACArC,EALS,EAKTA,YACAC,EANS,EAMTA,WACAmC,EAPS,EAOTA,UACAD,EARS,EAQTA,WAGAoB,EAAU,CACV9C,EAAGP,EAAeO,EAClBC,EAAGR,EAAeQ,GAElB8C,EAAOtD,EAAeO,EACtBgD,EAAOvD,EAAeQ,EAC1B,GAAIgD,OAAOF,GAAQpB,EAAY,GAAK,EAAG,CAEnC,IAAI3B,IADF+C,EACapB,EACX1B,EAAI+C,EAAOtB,EACf,GAAW,IAAN1B,GAAiB,IAANC,GAAaD,IAAM2B,EAAY,GAAW,IAAN1B,GAAaD,IAAM2B,EAAY,GAAK1B,IAAMyB,EAAa,GAAa,IAAN1B,GAAWC,IAAMyB,EAAa,EAAI,CAChJ,IAAIa,EACoBA,EAAd,IAANvC,GAAiB,IAANC,EAAgB,EACtBD,IAAM2B,EAAY,GAAW,IAAN1B,EAAgB,EACvCD,IAAM2B,EAAY,GAAK1B,IAAMyB,EAAa,EAAU,EACjD,EACZ,IAAIwB,EAAKT,KAAKC,MAAM1C,EAAIR,GAAa2D,EAAKV,KAAKC,MAAMzC,EAAIV,GACzDS,EAAI4B,EAAgBsB,EAAKC,EAAK3D,GAAY+C,GAAM,GAAKZ,EAAY,EACjE1B,EAAI2B,EAAgBsB,EAAKC,EAAK3D,GAAY+C,GAAM,GAAKb,EAAa,EAClEjC,EAAc,EAAQO,EACtBP,EAAc,EAAQQ,OAErBR,EAAc,EAAQsD,EAC3B5E,KAAKC,SAAS,CACVqB,iBACAY,cAAeyC,IAEnB3E,KAAK+D,qB,oBAIb,WAAU,IAAD,EAMD/D,KAAKL,MAHL2B,EAHC,EAGDA,eAYA2D,GAfC,EAIDxB,gBAJC,EAKDpC,WAUS,IAAMC,EAAc,EAAQ,KAAOA,EAAc,EAAQ,KAEtE,OAAO,gCACH,qBAAK9D,UAAY,SAAjB,SACKyH,IAEL,cAAC,IAAD,CACIC,aAAgBC,IAChBC,SAAW,UACXC,YACIrF,KAAK2D,cAGb,cAAC,IAAD,CACIuB,aAAgBC,IAChBC,SAAW,YACXC,YACIrF,KAAK4D,gBAGb,cAAC,IAAD,CACIsB,aAAgBC,IAChBC,SAAW,aACXC,YACIrF,KAAK6D,iBAGb,cAAC,IAAD,CACIqB,aAAgBC,IAChBC,SAAW,YACXC,YACIrF,KAAK8D,gBAKT9D,KAAKL,MAAM2D,eACL,cAAE,EAAF,CAAYtB,gBACNhC,KAAKL,MAAMqC,gBAEfX,WACIrB,KAAKL,MAAM0B,WAEfD,YACIpB,KAAKL,MAAMyB,YAEfoC,UACIxD,KAAKL,MAAM6D,UAEfD,WACIvD,KAAKL,MAAM4D,WAEfjC,eACItB,KAAKL,MAAM2B,eAEfY,cACIlC,KAAKL,MAAMuC,cAEfI,WACItC,KAAKL,MAAM2C,aAzDxB,W,GAxSI/B,aCNb+E,E,4JACF,WACI,IAAIC,EAAM,QAIV,OAHIvF,KAAKN,MAAM8F,UACXD,EAAM,UAEF,+BACJ,6BACCvF,KAAKN,MAAM+F,aACZ,6BAAI,wBAAQ5J,QAASmE,KAAKN,MAAMgG,YAA5B,SAA0CH,a,GATjChF,aAoEVoF,E,kDAnDX,WAAYjG,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAACiG,UAAW,EAAKlG,MAAMmG,SAAUC,YAAa,EAAKpG,MAAMoG,YAAaC,WAAY,EAAKrG,MAAMqG,WAAYC,UAAW,EAAGC,YAAaC,MAAM,GAAGC,MAAK,IAC/J,EAAKC,SAAW,EAAKA,SAASvG,KAAd,gBAChB,EAAKwG,WAAa,EAAKA,WAAWxG,KAAhB,gBAJH,E,4CAOnB,SAAS4B,GACL,IAAI6E,EAAQtG,KAAKL,MAAMsG,YACvBK,EAAM7E,IAAK,EACX,IAAIuE,EAAYhG,KAAKL,MAAMqG,UAAY,EACvChG,KAAKC,SAAS,CAAC+F,UAAWA,EAAUC,YAAYK,M,wBAMpD,SAAW7E,GACP,IAAI6E,EAAQtG,KAAKL,MAAMsG,YACvBK,EAAM7E,IAAK,EACX,IAAIuE,EAAYhG,KAAKL,MAAMqG,UAAY,EACnCA,EAAU,GAGdhG,KAAKC,SAAS,CAAC+F,UAAWA,EAAUC,YAAYK,M,oBAGpD,WAEI,IAFK,IAAD,OACAC,EAAO,CAAC,EAAE,EAAE,EAAE,GADd,WAEK9E,GACD,EAAK9B,MAAMsG,YAAYxE,GACvB8E,EAAK9E,GAAK,kBAAM,EAAK4E,WAAW5E,IAC/B8E,EAAK9E,GAAK,kBAAM,EAAK2E,SAAS3E,KAH9BA,EAAE,EAAEA,EAAE,EAAEA,IAAK,EAAbA,GAKT,OAAQ,gCACJ,6BAAKzB,KAAKN,MAAMkG,YAChB,kCACI,cAAC,EAAD,CAAYJ,QAASxF,KAAKL,MAAMsG,YAAY,GAC5CR,WAAYzF,KAAKN,MAAMoG,YAAY,GAAIJ,YAAaa,EAAK,KAC7D,cAAC,EAAD,CAAYf,QAASxF,KAAKL,MAAMsG,YAAY,GAChCR,WAAYzF,KAAKN,MAAMoG,YAAY,GAAIJ,YAAaa,EAAK,KACjE,cAAC,EAAD,CAAYf,QAASxF,KAAKL,MAAMsG,YAAY,GACpCR,WAAYzF,KAAKN,MAAMoG,YAAY,GAAIJ,YAAaa,EAAK,KACjE,cAAC,EAAD,CAAYf,QAASxF,KAAKL,MAAMsG,YAAY,GACpCR,WAAYzF,KAAKN,MAAMoG,YAAY,GAAIJ,YAAaa,EAAK,QAErE,mDAAsBvG,KAAKL,MAAMqG,oB,GA/CtBzF,aCbvB,SAASiG,EAAT,GAA4B,IAAZtJ,EAAW,EAAXA,QAIf,OAAO,cAACd,EAAA,EAAD,CAAQS,KAAK,KAAKR,QAAQ,UAAUR,QAH9B,WACZqB,EAAQ,SAEF,kBAGR,SAASuJ,EAAT,GAAkC,IAAZvJ,EAAW,EAAXA,QAIrB,OAAO,cAACd,EAAA,EAAD,CAAQS,KAAK,KAAKR,QAAQ,UAAUR,QAHxB,WAClBqB,EAAQ,eAEF,yB,IAuCOwJ,E,kDAnCd,WAAYhH,GAAO,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACZ1C,KAAM,IAEP,EAAKC,QAAQ,EAAKA,QAAQ2C,KAAb,gBALI,E,2CAQlB,SAAQ4B,GACPzB,KAAKC,SAAS,CACbhD,KAAMwE,M,oBAIR,WACC,OACC,sBAAKjE,UAAU,OAAf,UACC,sCACA,cAACgJ,EAAD,CAAMtJ,QAAS8C,KAAK9C,UACpB,cAACuJ,EAAD,CAAYvJ,QAAS8C,KAAK9C,UACL,SAApB8C,KAAKL,MAAM1C,KACX,cAAC,EAAD,IAEA,6BAEoB,eAApB+C,KAAKL,MAAM1C,KACX,cAAC0J,EAAD,CAAUf,UAAW,QAASE,YAAa,CAAC,OAAO,QAAQ,MAAM,SAAUC,WAAY,IAEvF,oC,GA7BchJ,IAAMwD,WCTnBtF,EAAM,IAAIC,IAAU,CAAEC,GADP,wBAkBNyL,MAff,WAAgB,IAAD,EACU7J,IAAMC,SAAS/B,EAAI0B,aAD7B,mBACPjB,EADO,KACDL,EADC,KAEd,OACC,gCACC,cAACoD,EAAD,CAAW/C,KAAMA,EAAML,QAASA,IAChC,cAACwL,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACC,eAACC,EAAA,EAAD,WACC,cAACC,EAAA,EAAD,UAAK,cAAC,EAAD,MACL,cAACA,EAAA,EAAD,UAAK,cAAC,EAAD,eChBVC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9H,SAAS+H,eAAe,W","file":"static/js/main.ad3a76cf.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as Realm from 'realm-web';\r\nimport { Button, Modal } from 'react-bootstrap';\r\n\r\nconst REALM_APP_ID = 'application-0-exwhb';\r\nconst app = new Realm.App({ id: REALM_APP_ID });\r\n\r\nfunction LoginAsGuest({ setUser }) {\r\n\tconst loginAsGuest = async () => {\r\n\t\ttry {\r\n\t\t\tconst user = await app.logIn(Realm.Credentials.anonymous());\r\n\t\t\tsetUser(user);\r\n\t\t} catch (error) {\r\n\t\t\talert('Failed to connect');\r\n\t\t}\r\n\t};\r\n\treturn <a href='#' onClick={loginAsGuest}>login as guest</a>;\r\n}\r\n\r\nfunction Register({ email, password}) {\r\n\tconst register = async () => {\r\n\t\ttry {\r\n\t\t\tawait app.emailPasswordAuth.registerUser(email, password);\r\n\t\t\talert('A confirmation mail has been sent to the mailbox.')\r\n\t\t} catch (error) {\r\n\t\t\talert('Invalid email or password');\r\n\t\t}\r\n\t};\r\n\treturn <Button variant='secondary' onClick={register}>Register</Button>;\r\n}\r\n\r\nfunction LoginWithEmail({ setUser, email, password}) {\r\n\tconst loginWithEmail = async () => {\r\n\t\ttry {\r\n\t\t\tconst user = await app.logIn(Realm.Credentials.emailPassword(email, password));\r\n\t\t\tsetUser(user);\r\n\t\t} catch (error) {\r\n\t\t\talert('Invalid email or password');\r\n\t\t}\r\n\t};\r\n\treturn <Button variant='secondary' onClick={loginWithEmail}>Login</Button>;\r\n}\r\n\r\nfunction LogOut({ setUser }) {\r\n\tconst logout = async () => {\r\n\t\ttry {\r\n\t\t\tawait app.currentUser.logOut();\r\n\t\t\tsetUser(null);\r\n\t\t} catch (error) {\r\n\t\t\talert('Failed to connect');\r\n\t\t}\r\n\t};\r\n\treturn <Button size=\"lg\" variant='secondary' onClick={logout}>Log out</Button>;\r\n}\r\n\r\nfunction LoginForm({ setUser }) {\r\n\tconst [mode, setMode]  = React.useState('Login');\r\n\tconst toggleMode = () => {\r\n\t\tsetMode((oldMode) => (oldMode === 'Login' ? 'Register' : 'Login'));\r\n\t};\r\n\t\r\n\tconst [username, setUsername] = React.useState('');\r\n\tconst [email, setEmail] = React.useState('');\r\n\tconst [password, setPassword] = React.useState('');\r\n\t\r\n\tfunction note(){\r\n\t\treturn\r\n\t}\r\n\t\r\n\tReact.useEffect(() => {\r\n\t\tsetUsername('');\r\n\t\tsetEmail('');\r\n\t\tsetPassword('');\r\n\t}, [mode]);\r\n\t\r\n\treturn (\r\n\t\t<div className='login_form'>\r\n\t\t\t{mode === 'Register'?\r\n\t\t\t<input\r\n\t\t\t\ttype = 'username'\r\n\t\t\t\tplaceholder = 'username'\r\n\t\t\t\tvalue = {username}\r\n\t\t\t\tonChange = {(e) => setUsername(e.target.value)}\r\n\t\t\t\tclassName='form_input'\r\n\t\t\t/>\r\n\t\t\t:<></>}\r\n\t\t\t<input\r\n\t\t\t\ttype = 'email'\r\n\t\t\t\tplaceholder = 'email'\r\n\t\t\t\tvalue = {email}\r\n\t\t\t\tonChange = {(e) => setEmail(e.target.value)}\r\n\t\t\t\tclassName='form_input'\r\n\t\t\t/>\r\n\t\t\t<input\r\n\t\t\t\ttype = 'password'\r\n\t\t\t\tplaceholder = 'password'\r\n\t\t\t\tvalue = {password}\r\n\t\t\t\tonChange = {(e) => setPassword(e.target.value)}\r\n\t\t\t\tclassName='form_input'\r\n\t\t\t/>\r\n\t\t\t{mode === 'Login' ? <LoginWithEmail setUser={setUser} email={email} password={password} /> : <Register email={email} password={password}/>}\r\n\t\t\t<div>\r\n\t\t\t\t<span>You may also </span>\r\n\t\t\t\t<a href='#' onClick={() => {toggleMode();}}>\r\n\t\t\t\t\t{mode === 'Login' ? 'register a new account' : 'go to login'}\r\n\t\t\t\t</a>\r\n\t\t\t\t<span> or </span>\r\n\t\t\t\t<LoginAsGuest setUser={setUser}/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nfunction LoginButton({ setUser }) {\r\n\tconst [show, setShow] = React.useState(false);\r\n\t\r\n\tconst handleClose = () => setShow(false);\r\n\tconst handleShow = () => setShow(true);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Button size=\"lg\" variant='secondary' onClick={handleShow}>\r\n\t\t\t\tLogin\r\n\t\t\t</Button>\r\n\t\t\t<Modal show={show} onHide={handleClose}>\r\n\t\t\t\t<Modal.Header closeButton>\r\n\t\t\t\t\t<Modal.Title>Join us!</Modal.Title>\r\n\t\t\t\t</Modal.Header>\r\n\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t<LoginForm setUser={setUser} />\r\n\t\t\t\t</Modal.Body>\r\n\t\t\t</Modal>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport {LoginAsGuest, Register, LoginWithEmail, LogOut, LoginForm, LoginButton};","import { Nav, Navbar, Button, Form, FormControl } from 'react-bootstrap';\r\nimport { LoginAsGuest, Register, LoginWithEmail, LogOut, LoginForm, LoginButton } from './Login'\r\n\r\nfunction TopNavbar({ user, setUser }) {\r\n\treturn(\r\n\t<div>\r\n\t\t<Navbar className='py-4' bg='dark' variant='dark'>\r\n\t\t\t<Navbar.Brand href=\"https://github.com/luyou00001/CSCI-3100-Project-E3\t\">Magic Maze</Navbar.Brand>\r\n\t\t\t<Nav>\r\n\t\t\t\t<Navbar.Text>• A game created by CSCI3100 Project Group E3</Navbar.Text>\r\n\t\t\t</Nav>\r\n\t\t\t<Nav className='ml-auto'>\r\n\t\t\t\t{!user?\r\n\t\t\t\t\t<Nav.Link href='#home'><LoginButton setUser={setUser}/></Nav.Link>\r\n\t\t\t\t:(\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<Navbar.Text>Your id: {user.id}</Navbar.Text>\r\n\t\t\t\t\t\t<Nav.Link href='#home'><LogOut setUser={setUser}/></Nav.Link>\r\n\t\t\t\t\t</>\r\n\t\t\t\t)}\r\n\t\t\t</Nav>\r\n\t\t</Navbar>\r\n\t</div>\r\n\t)\r\n}\r\n\r\nexport {TopNavbar};","import React from 'react';\r\n\r\nfetch('chats.txt')\t\r\n.then(res=>res.text())\r\n.then(txt => document.querySelector(\"#chat\").innerHTML=txt);\r\n\r\nlet prevtext=\"\";\r\nclass ChatRoom extends React.Component {\r\n    constructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {value: ''};\r\n  \r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n  \r\n    handleChange(event) {\r\n\t\tthis.setState({value: event.target.value});\r\n    }\r\n  \r\n    handleSubmit(event) {\r\n\t\tfetch('chats.txt')\r\n\t\t.then(res=>res.text())\r\n\t\t.then(txt => prevtext=txt); \r\n\t\tlet updatedtext=prevtext+\"\\n<div><h5>Username: </h5><p>\"+this.state.value+\"</p></div>\";\r\n\t\tfetch('chats.txt', {\r\n\t\t\tmethod: 'PUT', body: updatedtext \r\n\t\t});\r\n\t\tthis.setState({value: ''});\r\n\t\tfetch('chats.txt')\r\n\t\t.then(res=>res.text())\r\n\t\t.then(txt => document.querySelector(\"#chat\").innerHTML=txt);\r\n\t\tevent.preventDefault();\r\n    }\r\n\r\n    render() {\r\n\t\treturn (\r\n\t\t\t<div className='chat_room'>\r\n\t\t\t\t<h1>Chat room</h1>\r\n\t\t\t\t<div id=\"chat\"></div>\r\n\t\t\t\t<form onSubmit={this.handleSubmit}>\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\t<textarea value={this.state.value} placeholder=\"Send a message\" onChange={this.handleChange} />\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<input type=\"submit\" value=\"Submit\" />\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ChatRoom;","import React, {\n    Component\n} from 'react';\nimport pressed from \"pressed\"\n// Initialize the system\npressed.start()\n\nclass GameBoard extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            board: [],\n            entityStates: {\n                //\n                entrance: 'E',\n                obstacle: 'X',\n                empty: ' ',\n                player: 'O'\n            }\n        }\n        this.setObstacles = this.setObstacles.bind(this)\n        this.setPlayerPosition = this.setPlayerPosition.bind(this)\n        this.setBoard = this.setBoard.bind(this)\n    }\n    \n    componentWillMount() {\n        let {\n            boardHeight,\n            boardWidth,\n            cellHeight,\n            cellWidth,\n            playerPosition\n        } = this.props\n        let board = []\n\n        for (let i = 0; i < boardHeight; i++) {\n            let innerArray = []\n\n            for (let j = 0; j < boardWidth; j++) {\n                let obj = {}\n                obj['x'] = i\n                obj['y'] = j\n                if (playerPosition.x === i && playerPosition.y === j) {\n                    obj['state'] = this.state.entityStates.player\n                } else {\n                    obj['state'] = this.state.entityStates.empty\n                }\n\n                //let temp = []\n                innerArray.push(obj)\n                //temp.push(obj)\n            }\n            board.push(innerArray)\n        }\n        this.setState({\n            board: board,\n            playerPosition\n        }, () => {\n            this.setPlayerPosition(playerPosition)\n            this.setObstacles(this.props.randomPositions)\n        })\n    }\n    setPlayerPosition(playerPosition) {\n        let {\n            board\n        } = this.state\n        board[playerPosition.x][playerPosition.y][\"state\"] = this.state.entityStates.player\n        this.setState({\n            board\n        })\n    }\n    componentWillReceiveProps(nextProps) {\n        if (nextProps === this.props) {} else {\n            this.setBoard(nextProps)\n        }\n    }\n\n    setBoard(props) {\n        let {\n            playerPosition,\n            prevPlayerPos\n        } = props\n        let newTotalObstacles = this.state.totalObstaclesLeft\n\n        if (this.state.totalObstaclesLeft !== undefined && this.state.totalObstaclesLeft === 0) {\n            alert(\"Game over. Total moves: \" + this.props.totalMoves)\n        } else {\n            let {\n                board\n            } = this.state\n            let newPlayerPos = playerPosition\n            if (board[newPlayerPos.x][newPlayerPos.y][\"state\"] === this.state.entityStates.obstacle) {\n                --newTotalObstacles\n            }\n            board[newPlayerPos.x][newPlayerPos.y][\"state\"] = this.state.entityStates.player\n            board[prevPlayerPos.x][prevPlayerPos.y][\"state\"] = this.state.entityStates.empty\n            this.setState({\n                board: board,\n                playerPosition,\n                totalObstaclesLeft: newTotalObstacles\n            }, () => {\n                this.setPlayerPosition(playerPosition)\n            })\n        }\n    }\n    setObstacles(randomPositions) {\n        let {\n            board,\n            playerPosition\n        } = this.state\n        let totalObstaclesLeft = 0\n        for (let i = 0; i < randomPositions.length; i++) {\n            if (randomPositions[i].x !== playerPosition.x && randomPositions[i].y !== playerPosition.y) {\n                if (board[randomPositions[i].x][randomPositions[i].y][\"state\"] !== this.state.entityStates.obstacle) {\n                    ++totalObstaclesLeft\n                    board[randomPositions[i].x][randomPositions[i].y][\"state\"] = this.state.entityStates.obstacle\n                }\n            }\n        }\n        this.setState({\n            board,\n            totalObstaclesLeft\n        })\n    }\n\n    render() {\n        let {\n            board\n        } = this.state\n        return(\n            <table>\n                <tbody> {\n                    board.map((item, index) => (\n                        <tr key = {\n                            index\n                        }> {\n                            item.map((innerItem, innerIndex) => ( <\n                                td key = {\n                                    innerIndex\n                                }\n                                style = {\n                                    {\n                                        border: \"2px solid black\",\n                                        margin: 0,\n                                        width: 50,\n                                        height: 50,\n                                        textAlign: 'center',\n                                        verticalAlign: 'middle'\n                                    }\n                                } >\n                                <\n                                p > {\n                                    innerItem.state\n                                } < /p> < /\n                                td >\n                            ))\n                        } </tr>\n                    ))\n                }\n                </tbody> </table>\n            )\n        }\n}\n\nexport default GameBoard","  \nimport React, {\n    Component\n} from 'react';\nimport GameBoard from './GameBoard'\nimport _ from 'lodash'\nimport KeyHandler, {KEYDOWN} from 'react-key-handler';\n\nclass Game extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            showGameBoard: false,\n            boardHeight: 0,\n            boardWidth: 0,\n            areaHeight: 0,\n            areaWidth: 0,\n            randomEntrances: [],\n            randomPositions: [],\n            playerPosition: {\n                x: 0,\n                y: 0\n            },\n            prevPlayerPos: {\n                x: 0,\n                y: 0\n            },\n            totalMoves: 0\n        }\n        this.setEntrances = this.setEntrances.bind(this)\n        this.handleKeyUp = this.handleKeyUp.bind(this)\n        this.handleKeyDown = this.handleKeyDown.bind(this)\n        this.handleKeyRight = this.handleKeyRight.bind(this)\n        this.handleKeyLeft = this.handleKeyLeft.bind(this)\n        this.countTotalMoves = this.countTotalMoves.bind(this)\n        //this.setPlayerPosition = this.setPlayerPosition.bind(this)\n        this.initializeBoardPlayer = this.initializeBoardPlayer.bind(this)\n        this.startGame = this.startGame.bind(this)\n    }\n\n    componentWillMount() {\n        this.initializeBoardPlayer()\n    }\n\n    initializeBoardPlayer() {\n        // TODO\n        let boardWidth = 5\n        let boardHeight = 5\n        let areaWidth = 5\n        let areaHeight = 5\n        let playerPosition = {\n            //x: Math.floor(areaWidth / 2),\n            //y: Math.floor(areaHeight / 2)\n            x: 2,\n            y: 2\n        }\n        let prevPlayerPos = {\n            //x: Math.floor(areaWidth / 2),\n            //y: Math.floor(areaHeight / 2)\n            x: 2,\n            y: 2\n        }\n        this.setState({\n            boardHeight,\n            boardWidth,\n            areaWidth,\n            areaHeight,\n            playerPosition,\n            prevPlayerPos,\n            showGameBoard: true\n        }, () => {\n            this.startGame()\n        })\n    }\n\n    startGame() {\n        this.setEntrances()\n    }\n\n    setEntrances() {\n        let {\n            randomEntrances,\n            boardHeight,\n            boardWidth\n        } = this.state\n        let randomValues\n        for (let i = 0; i < boardHeight; i++) {\n            for (let j = 0; j < boardWidth; j++) {\n                randomEntrances.push([])\n                let entranceDifferences = [[1, -1], [1, 0], [0, 1], [-1, 1]]\n                let temp = 4\n                while (temp > 0) {\n                    randomValues = Math.floor(Math.random() * temp)\n                    let targetWidth = i + entranceDifferences[randomValues][0]\n                    let targetHeight = j + entranceDifferences[randomValues][1]\n                    if (targetWidth < 0 || targetWidth >= boardHeight || targetHeight < 0 || targetHeight >= boardHeight) {\n                        randomEntrances[j + i * boardWidth].push([])\n                        randomEntrances[j + i * boardWidth][4 - temp].push(i)\n                        randomEntrances[j + i * boardWidth][4 - temp].push(j)\n                    }\n                    else {\n                        randomEntrances[j + i * boardWidth].push([])\n                        randomEntrances[j + i * boardWidth][4 - temp].push(targetWidth)\n                        randomEntrances[j + i * boardWidth][4 - temp].push(targetHeight)\n                    }\n                    temp--\n                    entranceDifferences.splice(randomValues, 1)\n                }\n            }\n        }\n        this.setState({\n            randomEntrances\n        })\n    }\n\n    countTotalMoves() {\n        this.setState({\n            totalMoves: ++this.state.totalMoves\n        })\n    }\n\n    handleKeyUp(e) {\n        e.preventDefault()\n        let {\n            playerPosition,\n            randomEntrances,\n            boardHeight,\n            boardWidth,\n            areaWidth,\n            areaHeight\n        } = this.state\n\n        let prevPos = {\n            x: playerPosition.x,\n            y: playerPosition.y\n        }\n        let newX = playerPosition.x\n        let newY = playerPosition.y\n        if (Number(newY) % areaHeight - 1 >= 0) {\n            --newY\n            let x = newX % areaWidth\n            let y = newY % areaHeight\n            if ((x === 0 && y === 0) || (x === areaWidth - 1 && y === 0) || (x === areaWidth - 1 && y === areaHeight - 1) || (x === 0 && y === areaHeight - 1)) {\n                let temp\n                if (x === 0 && y === 0) temp = 0\n                else if (x === areaWidth - 1 && y === 0) temp = 1\n                else if (x === areaWidth - 1 && y === areaHeight - 1) temp = 2\n                else temp = 3\n                let ax = Math.floor(x / boardWidth), ay = Math.floor(y / boardHeight)\n                x = randomEntrances[ax + ay * boardWidth][temp][0] * areaWidth + 2\n                y = randomEntrances[ax + ay * boardWidth][temp][1] * areaHeight + 2\n                playerPosition[\"x\"] = x\n                playerPosition[\"y\"] = y\n            }\n            else playerPosition[\"y\"] = newY\n            this.setState({\n                playerPosition,\n                prevPlayerPos: prevPos\n            })\n            this.countTotalMoves()\n        }\n    }\n    handleKeyDown(e) {\n        e.preventDefault()\n        let {\n            playerPosition,\n            randomEntrances,\n            boardHeight,\n            boardWidth,\n            areaWidth,\n            areaHeight\n        } = this.state\n\n        let prevPos = {\n            x: playerPosition.x,\n            y: playerPosition.y\n        }\n        let newX = playerPosition.x\n        let newY = playerPosition.y\n        if (Number(newY) % areaHeight + 1 < areaHeight) {\n            ++newY\n            let x = newX % areaWidth\n            let y = newY % areaHeight\n            if ((x === 0 && y === 0) || (x === areaWidth - 1 && y === 0) || (x === areaWidth - 1 && y === areaHeight - 1) || (x === 0 && y === areaHeight - 1)) {\n                let temp\n                if (x === 0 && y === 0) temp = 0\n                else if (x === areaWidth - 1 && y === 0) temp = 1\n                else if (x === areaWidth - 1 && y === areaHeight - 1) temp = 2\n                else temp = 3\n                let ax = Math.floor(x / boardWidth), ay = Math.floor(y / boardHeight)\n                x = randomEntrances[ax + ay * boardWidth][temp][0] * areaWidth + 2\n                y = randomEntrances[ax + ay * boardWidth][temp][1] * areaHeight + 2\n                playerPosition[\"x\"] = x\n                playerPosition[\"y\"] = y\n            }\n            else playerPosition[\"y\"] = newY\n            this.setState({\n                playerPosition,\n                prevPlayerPos: prevPos\n            })\n            this.countTotalMoves()\n        }\n    }\n    handleKeyRight(e) {\n        e.preventDefault()\n        let {\n            playerPosition,\n            randomEntrances,\n            boardHeight,\n            boardWidth,\n            areaWidth,\n            areaHeight\n        } = this.state\n\n        let prevPos = {\n            x: playerPosition.x,\n            y: playerPosition.y\n        }\n        let newX = playerPosition.x\n        let newY = playerPosition.y\n        if (Number(newX) % areaWidth + 1 < areaWidth) {\n            ++newX\n            let x = newX % areaWidth\n            let y = newY % areaHeight\n            if ((x === 0 && y === 0) || (x === areaWidth - 1 && y === 0) || (x === areaWidth - 1 && y === areaHeight - 1) || (x === 0 && y === areaHeight - 1)) {\n                let temp\n                if (x === 0 && y === 0) temp = 0\n                else if (x === areaWidth - 1 && y === 0) temp = 1\n                else if (x === areaWidth - 1 && y === areaHeight - 1) temp = 2\n                else temp = 3\n                let ax = Math.floor(x / boardWidth), ay = Math.floor(y / boardHeight)\n                x = randomEntrances[ax + ay * boardWidth][temp][0] * areaWidth + 2\n                y = randomEntrances[ax + ay * boardWidth][temp][1] * areaHeight + 2\n                playerPosition[\"x\"] = x\n                playerPosition[\"y\"] = y\n            }\n            else playerPosition[\"x\"] = newX\n            this.setState({\n                playerPosition,\n                prevPlayerPos: prevPos\n            })\n            this.countTotalMoves()\n        }\n    }\n    handleKeyLeft(e) {\n        e.preventDefault()\n        let {\n            playerPosition,\n            randomEntrances,\n            boardHeight,\n            boardWidth,\n            areaWidth,\n            areaHeight\n        } = this.state\n\n        let prevPos = {\n            x: playerPosition.x,\n            y: playerPosition.y\n        }\n        let newX = playerPosition.x\n        let newY = playerPosition.y\n        if (Number(newX) % areaWidth - 1 >= 0) {\n            --newX\n            let x = newX % areaWidth\n            let y = newY % areaHeight\n            if ((x === 0 && y === 0) || (x === areaWidth - 1 && y === 0) || (x === areaWidth - 1 && y === areaHeight - 1) || (x === 0 && y === areaHeight - 1)) {\n                let temp\n                if (x === 0 && y === 0) temp = 0\n                else if (x === areaWidth - 1 && y === 0) temp = 1\n                else if (x === areaWidth - 1 && y === areaHeight - 1) temp = 2\n                else temp = 3\n                let ax = Math.floor(x / boardWidth), ay = Math.floor(y / boardHeight)\n                x = randomEntrances[ax + ay * boardWidth][temp][0] * areaWidth + 2\n                y = randomEntrances[ax + ay * boardWidth][temp][1] * areaHeight + 2\n                playerPosition[\"x\"] = x\n                playerPosition[\"y\"] = y\n            }\n            else playerPosition[\"x\"] = newX\n            this.setState({\n                playerPosition,\n                prevPlayerPos: prevPos\n            })\n            this.countTotalMoves()\n        }\n    }\n\n    render() {\n\n        let {\n            playerPosition,\n            randomEntrances,\n            boardWidth\n        } = this.state\n        /*\n        let temp = playerPosition[\"x\"] + playerPosition[\"y\"] * boardWidth\n        let status = 'Entrance: '\n        if (randomEntrances[temp]) {\n            for (let i = 0; i < 4; i++) {\n                status += '(' + randomEntrances[temp][i][0] + ', ' + randomEntrances[temp][i][1] + ') '\n            }\n        }*/\n        let status = '(' + playerPosition[\"x\"] + ', ' + playerPosition[\"y\"] + ')'\n\n        return(<div>\n            <div className = \"status\">\n                {status}\n            </div>\n            <KeyHandler\n                keyEventName = {KEYDOWN}\n                keyValue = \"ArrowUp\"\n                onKeyHandle = {\n                    this.handleKeyUp\n                }\n            />\n            <KeyHandler\n                keyEventName = {KEYDOWN}\n                keyValue = \"ArrowDown\"\n                onKeyHandle = {\n                    this.handleKeyDown\n                }\n            />\n            <KeyHandler\n                keyEventName = {KEYDOWN}\n                keyValue = \"ArrowRight\"\n                onKeyHandle = {\n                    this.handleKeyRight\n                }\n            />\n            <KeyHandler\n                keyEventName = {KEYDOWN}\n                keyValue = \"ArrowLeft\"\n                onKeyHandle = {\n                    this.handleKeyLeft\n                }\n            />\n\n            {\n                this.state.showGameBoard &&\n                    ( < GameBoard randomPositions = {\n                            this.state.randomPositions\n                        }\n                        boardWidth = {\n                            this.state.boardWidth\n                        }\n                        boardHeight = {\n                            this.state.boardHeight\n                        }\n                        areaWidth = {\n                            this.state.areaWidth\n                        }\n                        areaHeight = {\n                            this.state.areaHeight\n                        }\n                        playerPosition = {\n                            this.state.playerPosition\n                        }\n                        prevPlayerPos = {\n                            this.state.prevPlayerPos\n                        }\n                        totalMoves = {\n                            this.state.totalMoves\n                        }\n                        />)\n                    } </div>\n            )\n        }\n    }\n\n    export default Game;","import React, { Component } from 'react';\r\n\r\nclass Playerline extends Component{\r\n    render(){\r\n        let str = \"Ready\"\r\n        if (this.props.isready){\r\n            str = \"Cancel\"\r\n        }\r\n        return (<tr>\r\n            <td>\r\n            {this.props.playername}</td>\r\n            <td><button onClick={this.props.handleready}>{str}</button>\r\n            </td>\r\n            </tr>\r\n            )\r\n    }\r\n}\r\n\r\nclass Gameroom extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {room_name: this.props.roomname, player_list: this.props.player_list, player_num: this.props.player_num, ready_num: 0 ,ready_state: Array(4).fill(false)};\r\n        this.addready = this.addready.bind(this)\r\n        this.minusready = this.minusready.bind(this)\r\n    }\r\n\r\n    addready(i){\r\n        let array = this.state.ready_state\r\n        array[i] = true\r\n        let ready_num = this.state.ready_num + 1;\r\n        this.setState({ready_num: ready_num,ready_state:array});\r\n        if (ready_num>=4){\r\n            return;\r\n        }\r\n    }\r\n\r\n    minusready(i){\r\n        let array = this.state.ready_state\r\n        array[i] = false\r\n        let ready_num = this.state.ready_num - 1;\r\n        if (ready_num<0){\r\n            return;\r\n        }\r\n        this.setState({ready_num: ready_num,ready_state:array});\r\n    }\r\n\r\n    render(){\r\n        let list = [0,0,0,0];\r\n        for (let i=0;i<4;i++){\r\n            if (this.state.ready_state[i])\r\n                list[i] = () => this.minusready(i)\r\n            else list[i] = () => this.addready(i)\r\n        }\r\n        return (<div>\r\n            <h1>{this.props.room_name}</h1>\r\n            <table>\r\n                <Playerline isready={this.state.ready_state[0]}\r\n                playername={this.props.player_list[0]} handleready={list[0]} />\r\n            <Playerline isready={this.state.ready_state[1]}\r\n                        playername={this.props.player_list[1]} handleready={list[1]} />\r\n                <Playerline isready={this.state.ready_state[2]}\r\n                        playername={this.props.player_list[2]} handleready={list[2]} />\r\n                <Playerline isready={this.state.ready_state[3]}\r\n                        playername={this.props.player_list[3]} handleready={list[3]} />\r\n            </table>\r\n            <h2>Number of ready: {this.state.ready_num}</h2>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default Gameroom;","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport Game from './Game';\r\nimport GameRoom from './GameRoom';\r\n\r\nfunction Demo({ setMode }) {\r\n\tconst demo = () => {\r\n\t\tsetMode(\"Demo\");\r\n\t}\r\n\treturn <Button size=\"lg\" variant=\"primary\" onClick={demo}>Demo</Button>\r\n}\r\n\r\nfunction CustomRoom({ setMode }) {\r\n\tconst customRoom = () => {\r\n\t\tsetMode(\"CustomRoom\");\r\n\t}\r\n\treturn <Button size=\"lg\" variant=\"primary\" onClick={customRoom}>Custom room</Button>\r\n}\r\n\r\nclass Menu extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tmode: \"\",\r\n\t\t}\r\n\t\tthis.setMode=this.setMode.bind(this);\r\n\t}\r\n\t\r\n\tsetMode(i)\t{\r\n\t\tthis.setState({\r\n\t\t\tmode: i,\r\n\t\t});\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div className='menu'>\r\n\t\t\t\t<h1>Menu</h1>\r\n\t\t\t\t<Demo setMode={this.setMode}/>\r\n\t\t\t\t<CustomRoom setMode={this.setMode}/>\r\n\t\t\t\t{this.state.mode === \"Demo\"?\r\n\t\t\t\t\t<Game />\r\n\t\t\t\t:\r\n\t\t\t\t\t<></>\r\n\t\t\t\t}\r\n\t\t\t\t{this.state.mode === \"CustomRoom\"?\r\n\t\t\t\t\t<GameRoom room_name={\"Game1\"} player_list={[\"Paul\",\"Alice\",\"Sun\",\"Jason\"]} player_num={4}/>\r\n\t\t\t\t:\r\n\t\t\t\t\t<></>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Menu;","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row, Col } from 'react-bootstrap'\nimport * as Realm from 'realm-web';\nimport { TopNavbar } from './Navbar'\nimport ChatRoom from './ChatRoom';\nimport Menu from './Menu';\n\nconst REALM_APP_ID = 'application-0-exwhb';\nconst app = new Realm.App({ id: REALM_APP_ID });\n\nfunction App() {\n\tconst [user, setUser] = React.useState(app.currentUser);\n\treturn (\n\t\t<div>\n\t\t\t<TopNavbar user={user} setUser={setUser}/>\n\t\t\t<Container fluid>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col><ChatRoom /></Col>\n\t\t\t\t\t<Col><Menu /></Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}