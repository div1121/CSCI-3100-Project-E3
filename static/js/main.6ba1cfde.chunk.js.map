{"version":3,"sources":["Login.js","Navbar.js","GameBoard.js","Game.js","App.js","index.js"],"names":["app","Realm","id","LoginAsGuest","setUser","loginAsGuest","a","logIn","anonymous","user","alert","href","onClick","Register","email","password","register","emailPasswordAuth","registerUser","Button","variant","LoginWithEmail","loginWithEmail","emailPassword","LogOut","logout","currentUser","logOut","LoginForm","React","useState","mode","setMode","username","setUsername","setEmail","setPassword","useEffect","className","type","placeholder","value","onChange","e","target","oldMode","LoginButton","show","setShow","Modal","onHide","Header","closeButton","Title","Body","TopNavbar","Navbar","bg","Brand","Nav","Text","Link","pressed","start","GameBoard","props","state","board","entityStates","entrance","obstacle","empty","player","setObstacles","bind","setPlayerPosition","setBoard","this","boardHeight","boardWidth","playerPosition","cellHeight","cellWidth","i","innerArray","j","obj","x","y","push","setState","randomPositions","nextProps","prevPlayerPos","newTotalObstacles","totalObstaclesLeft","undefined","totalMoves","newPlayerPos","length","map","item","index","innerItem","innerIndex","style","border","margin","width","height","textAlign","verticalAlign","Component","Game","showGameBoard","randomEntrances","generateRandomObstacles","setEntrances","handleKeyUp","handleKeyDown","handleKeyRight","handleKeyLeft","countTotalMoves","initializeBoardPlayer","startGame","areaWidth","areaHeight","randomValues","smallest","Number","Math","ceil","_","random","newRandomPosition","includes","entranceDifferences","temp","targetWidth","floor","targetHeight","splice","preventDefault","prevPos","newX","newY","status","keyValue","onKeyHandle","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ba1cfde.chunk.js","sourcesContent":["import React from \"react\";\r\nimport * as Realm from \"realm-web\";\r\nimport { Button, Modal } from 'react-bootstrap';\r\n\r\nconst REALM_APP_ID = \"application-0-exwhb\";\r\nconst app = new Realm.App({ id: REALM_APP_ID });\r\n\r\nfunction LoginAsGuest({ setUser }) {\r\n\tconst loginAsGuest = async () => {\r\n\t\ttry {\r\n\t\t\tconst user = await app.logIn(Realm.Credentials.anonymous());\r\n\t\t\tsetUser(user);\r\n\t\t} catch (error) {\r\n\t\t\talert(\"Failed to connect\");\r\n\t\t}\r\n\t};\r\n\treturn <a href=\"#\" onClick={loginAsGuest}>login as guest</a>;\r\n}\r\n\r\nfunction Register({ email, password}) {\r\n\tconst register = async () => {\r\n\t\ttry {\r\n\t\t\tawait app.emailPasswordAuth.registerUser(email, password);\r\n\t\t\talert(\"A confirmation mail has been sent to the mailbox.\")\r\n\t\t} catch (error) {\r\n\t\t\talert(\"Invalid email or password\");\r\n\t\t}\r\n\t};\r\n\treturn <Button variant=\"secondary\" onClick={register}>Register</Button>;\r\n}\r\n\r\nfunction LoginWithEmail({ setUser, email, password}) {\r\n\tconst loginWithEmail = async () => {\r\n\t\ttry {\r\n\t\t\tconst user = await app.logIn(Realm.Credentials.emailPassword(email, password));\r\n\t\t\tsetUser(user);\r\n\t\t} catch (error) {\r\n\t\t\talert(\"Invalid email or password\");\r\n\t\t}\r\n\t};\r\n\treturn <Button variant=\"secondary\" onClick={loginWithEmail}>Login</Button>;\r\n}\r\n\r\nfunction LogOut({ setUser }) {\r\n\tconst logout = async () => {\r\n\t\ttry {\r\n\t\t\tawait app.currentUser.logOut();\r\n\t\t\tsetUser(null);\r\n\t\t} catch (error) {\r\n\t\t\talert(\"Failed to connect\");\r\n\t\t}\r\n\t};\r\n\treturn <Button variant=\"secondary\" onClick={logout}>Log out</Button>;\r\n}\r\n\r\nfunction LoginForm({ setUser }) {\r\n\tconst [mode, setMode]  = React.useState(\"Login\");\r\n\tconst toggleMode = () => {\r\n\t\tsetMode((oldMode) => (oldMode === \"Login\" ? \"Register\" : \"Login\"));\r\n\t};\r\n\t\r\n\tconst [username, setUsername] = React.useState(\"\");\r\n\tconst [email, setEmail] = React.useState(\"\");\r\n\tconst [password, setPassword] = React.useState(\"\");\r\n\t\r\n\tfunction note(){\r\n\t\treturn\r\n\t}\r\n\t\r\n\tReact.useEffect(() => {\r\n\t\tsetUsername(\"\");\r\n\t\tsetEmail(\"\");\r\n\t\tsetPassword(\"\");\r\n\t}, [mode]);\r\n\t\r\n\treturn (\r\n\t\t<div className=\"login_form\">\r\n\t\t\t{mode === \"Register\"?\r\n\t\t\t<input\r\n\t\t\t\ttype = \"username\"\r\n\t\t\t\tplaceholder = \"username\"\r\n\t\t\t\tvalue = {username}\r\n\t\t\t\tonChange = {(e) => setUsername(e.target.value)}\r\n\t\t\t\tclassName=\"form_input\"\r\n\t\t\t/>\r\n\t\t\t:<></>}\r\n\t\t\t<input\r\n\t\t\t\ttype = \"email\"\r\n\t\t\t\tplaceholder = \"email\"\r\n\t\t\t\tvalue = {email}\r\n\t\t\t\tonChange = {(e) => setEmail(e.target.value)}\r\n\t\t\t\tclassName=\"form_input\"\r\n\t\t\t/>\r\n\t\t\t<input\r\n\t\t\t\ttype = \"password\"\r\n\t\t\t\tplaceholder = \"password\"\r\n\t\t\t\tvalue = {password}\r\n\t\t\t\tonChange = {(e) => setPassword(e.target.value)}\r\n\t\t\t\tclassName=\"form_input\"\r\n\t\t\t/>\r\n\t\t\t{mode === \"Login\" ? <LoginWithEmail setUser={setUser} email={email} password={password} /> : <Register email={email} password={password}/>}\r\n\t\t\t<div>\r\n\t\t\t\t<span>You may also </span>\r\n\t\t\t\t<a href=\"#\" onClick={() => {toggleMode();}}>\r\n\t\t\t\t\t{mode === \"Login\" ? \"register a new account\" : \"go to login\"}\r\n\t\t\t\t</a>\r\n\t\t\t\t<span> or </span>\r\n\t\t\t\t<LoginAsGuest setUser={setUser}/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nfunction LoginButton({ setUser }) {\r\n\tconst [show, setShow] = React.useState(false);\r\n\t\r\n\tconst handleClose = () => setShow(false);\r\n\tconst handleShow = () => setShow(true);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Button variant=\"secondary\" onClick={handleShow}>\r\n\t\t\t\tLogin\r\n\t\t\t</Button>\r\n\t\t\t<Modal show={show} onHide={handleClose}>\r\n\t\t\t\t<Modal.Header closeButton>\r\n\t\t\t\t\t<Modal.Title>Join us!</Modal.Title>\r\n\t\t\t\t</Modal.Header>\r\n\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t<LoginForm setUser={setUser} />\r\n\t\t\t\t</Modal.Body>\r\n\t\t\t</Modal>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport {LoginAsGuest, Register, LoginWithEmail, LogOut, LoginForm, LoginButton};","import { Nav, Navbar, Button, Form, FormControl} from 'react-bootstrap';\r\nimport {LoginAsGuest, Register, LoginWithEmail, LogOut, LoginForm, LoginButton} from \"./Login\"\r\n\r\nfunction TopNavbar({ user, setUser }){\r\n\treturn(\r\n\t<div>\r\n\t\t<Navbar bg=\"dark\" variant=\"dark\">\r\n\t\t\t<Navbar.Brand>Magic Maze</Navbar.Brand>\r\n\t\t\t<Nav>\r\n\t\t\t\t<Navbar.Text>• A game created by CSCI3100 Project Group E3</Navbar.Text>\r\n\t\t\t</Nav>\r\n\t\t\t<Nav className=\"ml-auto\">\r\n\t\t\t\t{!user?\r\n\t\t\t\t\t<Nav.Link href=\"#home\"><LoginButton setUser={setUser}/></Nav.Link>\r\n\t\t\t\t:(\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<Navbar.Text>Your id: {user.id}</Navbar.Text>\r\n\t\t\t\t\t\t<Nav.Link href=\"#home\"><LogOut setUser={setUser}/></Nav.Link>\r\n\t\t\t\t\t</>\r\n\t\t\t\t)}\r\n\t\t\t</Nav>\r\n\t\t</Navbar>\r\n\t</div>\r\n\t)\r\n}\r\n\r\nexport {TopNavbar};","import React, {\n    Component\n} from 'react';\nimport pressed from \"pressed\"\n// Initialize the system\npressed.start()\n\nclass GameBoard extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            board: [],\n            entityStates: {\n                //\n                entrance: 'E',\n                obstacle: 'X',\n                empty: ' ',\n                player: 'O'\n            }\n        }\n        this.setObstacles = this.setObstacles.bind(this)\n        this.setPlayerPosition = this.setPlayerPosition.bind(this)\n        this.setBoard = this.setBoard.bind(this)\n    }\n    \n    componentWillMount() {\n        let {\n            boardHeight,\n            boardWidth,\n            cellHeight,\n            cellWidth,\n            playerPosition\n        } = this.props\n        let board = []\n\n        for (let i = 0; i < boardHeight; i++) {\n            let innerArray = []\n\n            for (let j = 0; j < boardWidth; j++) {\n                let obj = {}\n                obj['x'] = i\n                obj['y'] = j\n                if (playerPosition.x === i && playerPosition.y === j) {\n                    obj['state'] = this.state.entityStates.player\n                } else {\n                    obj['state'] = this.state.entityStates.empty\n                }\n\n                //let temp = []\n                innerArray.push(obj)\n                //temp.push(obj)\n            }\n            board.push(innerArray)\n        }\n        this.setState({\n            board: board,\n            playerPosition\n        }, () => {\n            this.setPlayerPosition(playerPosition)\n            this.setObstacles(this.props.randomPositions)\n        })\n    }\n    setPlayerPosition(playerPosition) {\n        let {\n            board\n        } = this.state\n        board[playerPosition.x][playerPosition.y][\"state\"] = this.state.entityStates.player\n        this.setState({\n            board\n        })\n    }\n    componentWillReceiveProps(nextProps) {\n        if (nextProps === this.props) {} else {\n            this.setBoard(nextProps)\n        }\n    }\n\n    setBoard(props) {\n        let {\n            playerPosition,\n            prevPlayerPos\n        } = props\n        let newTotalObstacles = this.state.totalObstaclesLeft\n\n        if (this.state.totalObstaclesLeft !== undefined && this.state.totalObstaclesLeft === 0) {\n            alert(\"Game over. Total moves: \" + this.props.totalMoves)\n        } else {\n            let {\n                board\n            } = this.state\n            let newPlayerPos = playerPosition\n            if (board[newPlayerPos.x][newPlayerPos.y][\"state\"] === this.state.entityStates.obstacle) {\n                --newTotalObstacles\n            }\n            board[newPlayerPos.x][newPlayerPos.y][\"state\"] = this.state.entityStates.player\n            board[prevPlayerPos.x][prevPlayerPos.y][\"state\"] = this.state.entityStates.empty\n            this.setState({\n                board: board,\n                playerPosition,\n                totalObstaclesLeft: newTotalObstacles\n            }, () => {\n                this.setPlayerPosition(playerPosition)\n            })\n        }\n    }\n    setObstacles(randomPositions) {\n        let {\n            board,\n            playerPosition\n        } = this.state\n        let totalObstaclesLeft = 0\n        for (let i = 0; i < randomPositions.length; i++) {\n            if (randomPositions[i].x !== playerPosition.x && randomPositions[i].y !== playerPosition.y) {\n                if (board[randomPositions[i].x][randomPositions[i].y][\"state\"] !== this.state.entityStates.obstacle) {\n                    ++totalObstaclesLeft\n                    board[randomPositions[i].x][randomPositions[i].y][\"state\"] = this.state.entityStates.obstacle\n                }\n            }\n        }\n        this.setState({\n            board,\n            totalObstaclesLeft\n        })\n    }\n\n    render() {\n        let {\n            board\n        } = this.state\n        return(\n            <table>\n                <tbody> {\n                    board.map((item, index) => (\n                        <tr key = {\n                            index\n                        }> {\n                            item.map((innerItem, innerIndex) => ( <\n                                td key = {\n                                    innerIndex\n                                }\n                                style = {\n                                    {\n                                        border: \"2px solid black\",\n                                        margin: 0,\n                                        width: 50,\n                                        height: 50,\n                                        textAlign: 'center',\n                                        verticalAlign: 'middle'\n                                    }\n                                } >\n                                <\n                                p > {\n                                    innerItem.state\n                                } < /p> < /\n                                td >\n                            ))\n                        } </tr>\n                    ))\n                }\n                </tbody> </table>\n            )\n        }\n}\n\nexport default GameBoard","import React, {\n    Component\n} from 'react';\nimport GameBoard from './GameBoard'\nimport _ from 'lodash'\nimport KeyHandler from 'react-key-handler';\n\nclass Game extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            showGameBoard: false,\n            boardHeight: 0,\n            boardWidth: 0,\n            cellHeight: 0,\n            cellWidth: 0,\n            randomEntrances: [],\n            randomPositions: [],\n            playerPosition: {\n                x: 0,\n                y: 0\n            },\n            prevPlayerPos: {\n                x: 0,\n                y: 0\n            },\n            totalMoves: 0\n        }\n        this.generateRandomObstacles = this.generateRandomObstacles.bind(this)\n        this.setEntrances = this.setEntrances.bind(this)\n        this.handleKeyUp = this.handleKeyUp.bind(this)\n        this.handleKeyDown = this.handleKeyDown.bind(this)\n        this.handleKeyRight = this.handleKeyRight.bind(this)\n        this.handleKeyLeft = this.handleKeyLeft.bind(this)\n        this.countTotalMoves = this.countTotalMoves.bind(this)\n        //this.setPlayerPosition = this.setPlayerPosition.bind(this)\n        this.initializeBoardPlayer = this.initializeBoardPlayer.bind(this)\n        this.startGame = this.startGame.bind(this)\n    }\n\n    componentWillMount() {\n        this.initializeBoardPlayer()\n    }\n\n    initializeBoardPlayer() {\n        // TODO\n        let boardWidth = 5\n        let boardHeight = 5\n        let areaWidth = 5\n        let areaHeight = 5\n        let playerPosition = {\n            x: 0,\n            y: 0\n        }\n        this.setState({\n            boardHeight,\n            boardWidth,\n            areaWidth,\n            areaHeight,\n            playerPosition,\n            showGameBoard: true\n        }, () => {\n            this.startGame()\n        })\n    }\n\n    startGame() {\n        this.generateRandomObstacles()\n        this.setEntrances()\n    }\n    /*\n    setPlayerPosition() {\n        let {\n            boardHeight,\n            boardWidth\n        } = this.state\n        let playerPosition = {\n            x: Math.floor(boardHeight / 2),\n            y: Math.floor(boardWidth / 2)\n        }\n        this.setState({\n            playerPosition,\n            showGameBoard: true\n        })\n    }*/\n\n    generateRandomObstacles() {\n        let {\n            randomPositions\n        } = this.state\n        let randomValues = []\n        let {\n            boardHeight,\n            boardWidth\n        } = this.state\n        let smallest = 0\n        if (Number(boardHeight) < Number(boardWidth)) {\n            smallest = boardHeight\n        } else {\n            smallest = boardWidth\n        }\n        for (let i = 0; i < Math.ceil(smallest / 2); i++) {\n            randomValues.push(_.random(0, smallest - 1))\n        }\n        for (let i = 0; i < randomValues.length; i++) {\n            for (let j = 0; j < randomValues.length; j++) {\n                let newRandomPosition = {\n                    x: randomValues[i],\n                    y: randomValues[j]\n                }\n                if (!randomPositions.includes(newRandomPosition)) {\n                    randomPositions.push(newRandomPosition)\n                }\n            }\n        }\n        this.setState({\n            randomPositions\n        })\n    }\n\n    setEntrances() {\n        let {\n            randomEntrances,\n            boardHeight,\n            boardWidth\n        } = this.state\n        let randomValues\n        for (let i = 0; i < boardHeight; i++) {\n            for (let j = 0; j < boardWidth; j++) {\n                randomEntrances.push([])\n                let entranceDifferences = [[1, -1], [1, 0], [0, 1], [-1, 1]]\n                let temp = 4\n                while (temp > 0) {\n                    randomValues = Math.floor(Math.random() * temp)\n                    let targetWidth = i + entranceDifferences[randomValues][0]\n                    let targetHeight = j + entranceDifferences[randomValues][1]\n                    if (targetWidth < 0 || targetWidth >= boardHeight || targetHeight < 0 || targetHeight >= boardHeight) {\n                        randomEntrances[j + i * boardWidth].push([])\n                        randomEntrances[j + i * boardWidth][4 - temp].push(i)\n                        randomEntrances[j + i * boardWidth][4 - temp].push(j)\n                    }\n                    else {\n                        randomEntrances[j + i * boardWidth].push([])\n                        randomEntrances[j + i * boardWidth][4 - temp].push(targetWidth)\n                        randomEntrances[j + i * boardWidth][4 - temp].push(targetHeight)\n                    }\n                    temp--\n                    entranceDifferences.splice(randomValues, 1)\n                }\n            }\n        }\n        this.setState({\n            randomEntrances\n        })\n    }\n\n    countTotalMoves() {\n        this.setState({\n            totalMoves: ++this.state.totalMoves\n        })\n    }\n\n    handleKeyUp(e) {\n        e.preventDefault()\n        let {\n            playerPosition,\n        } = this.state\n\n        let prevPos = {\n            x: playerPosition.x,\n            y: playerPosition.y\n        }\n        let newX = playerPosition.x\n        if (Number(newX) - 1 >= 0) {\n            --newX\n            playerPosition[\"x\"] = newX\n            this.setState({\n                playerPosition,\n                prevPlayerPos: prevPos\n            })\n            this.countTotalMoves()\n        }\n    }\n    handleKeyDown(e) {\n        e.preventDefault()\n        let {\n            playerPosition,\n            boardHeight,\n        } = this.state\n\n        let prevPos = {\n            x: playerPosition.x,\n            y: playerPosition.y\n        }\n\n        let newX = playerPosition.x\n        if (Number(newX) + 1 < boardHeight) {\n            ++newX\n            playerPosition[\"x\"] = newX\n            this.setState({\n                playerPosition,\n                prevPlayerPos: prevPos\n            })\n            this.countTotalMoves()\n        }\n    }\n    handleKeyRight(e) {\n        e.preventDefault()\n        let {\n            playerPosition,\n            boardWidth\n        } = this.state\n\n        let prevPos = {\n            x: playerPosition.x,\n            y: playerPosition.y\n        }\n\n        let newY = playerPosition.y\n        if (Number(newY) + 1 < boardWidth) {\n            ++newY\n            playerPosition[\"y\"] = newY\n            this.setState({\n                playerPosition,\n                prevPlayerPos: prevPos\n            })\n            this.countTotalMoves()\n        }\n    }\n    handleKeyLeft(e) {\n        e.preventDefault()\n        let {\n            playerPosition,\n        } = this.state\n\n        let prevPos = {\n            x: playerPosition.x,\n            y: playerPosition.y\n        }\n        let newY = playerPosition.y\n        if (Number(newY) - 1 >= 0) {\n            --newY\n            playerPosition[\"y\"] = newY\n            this.setState({\n                playerPosition,\n                prevPlayerPos: prevPos\n            })\n            this.countTotalMoves()\n        }\n    }\n\n    render() {\n\n        let {\n            playerPosition,\n            randomEntrances,\n            boardWidth\n        } = this.state\n        let temp = playerPosition[\"x\"] + playerPosition[\"y\"] * boardWidth\n        let status = 'Entrance: '\n        if (randomEntrances[temp]) {\n            for (let i = 0; i < 4; i++) {\n                status += '(' + randomEntrances[temp][i][0] + ', ' + randomEntrances[temp][i][1] + ') '\n            }\n        }\n\n        return(<div>\n            <div className = \"status\">\n                {status}\n            </div>\n            <\n                KeyHandler keyValue = \"ArrowUp\"\n                onKeyHandle = {\n                    this.handleKeyUp\n                }\n            /> <\n            KeyHandler keyValue = \"ArrowDown\"\n            onKeyHandle = {\n                this.handleKeyDown\n            }\n            /> <\n            KeyHandler keyValue = \"ArrowRight\"\n            onKeyHandle = {\n                this.handleKeyRight\n            }\n            /> <\n            KeyHandler keyValue = \"ArrowLeft\"\n            onKeyHandle = {\n                this.handleKeyLeft\n            }\n            />\n\n            {\n                this.state.showGameBoard &&\n                    ( < GameBoard randomPositions = {\n                            this.state.randomPositions\n                        }\n                        boardWidth = {\n                            this.state.boardWidth\n                        }\n                        boardHeight = {\n                            this.state.boardHeight\n                        }\n                        playerPosition = {\n                            this.state.playerPosition\n                        }\n                        prevPlayerPos = {\n                            this.state.prevPlayerPos\n                        }\n                        totalMoves = {\n                            this.state.totalMoves\n                        }\n                        />)\n                    } </div>\n            )\n        }\n    }\n\n    export default Game;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as Realm from \"realm-web\";\nimport {TopNavbar} from \"./Navbar\"\nimport Game from './Game';\n\nconst REALM_APP_ID = \"application-0-exwhb\";\nconst app = new Realm.App({ id: REALM_APP_ID });\n\nfunction App() {\n\tconst [user, setUser] = React.useState(app.currentUser);\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<TopNavbar user={user} setUser={setUser}/>\n\t\t\t<Game />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}